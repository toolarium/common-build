#!/bin/sh

#########################################################################
#
# cb
#
# Copyright by toolarium, all rights reserved.
# MIT License: https://mit-license.org
#
#########################################################################


CB_LINE="----------------------------------------------------------------------------------------"
CB_LINEHEADER=".: "
PN=$(basename "$0")
PN_FULL="$0"
#REL_PROG_PATH="${0%/*}"
ABS_PROG_PATH=$(cd -- "`dirname $0`" && pwd)

CB_SCRIPT_PATH=$(dirname "$0")
CB_CURRENT_PATH=$PWD
CB_INSTALL_SILENT="false"
CB_OS="linux"
FULLTIMESTAMP="date '+%Y%d%m%H%M%S'"

# detect the platform (similar to $OSTYPE)
CB_OS="$(uname | tr '[:upper:]' '[:lower:]')"
CB_OS=$(echo "$CB_OS" | awk '{print substr($0, 0, 7)}')
case $CB_OS in
	'linux') CB_OS="linux";;
	'freebsd') CB_OS="freebsd";;
	'windows') CB_OS="windows";;
	'mac') CB_OS="mac";;
	'darwin') CB_OS="mac";;
	'sunos') CB_OS="solaris";;
	'cygwin') CB_OS="cygwin";;
	'cygwin_') CB_OS="cygwin";;
	'aix') CB_OS="aix";;
	*) ;;
esac
CB_MACHINE="$(uname -m | tr '[:upper:]' '[:lower:]')"
export CB_OS CB_MACHINE
export CB_LINE CB_LINEHEADER


#########################################################################
# End with error
#########################################################################
endWithError() {
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT error-end $*" 2>/dev/null
	exit 1
}

if [ -z "$CB_HOME" ]; then
	echo "$CB_LINE"
	echo "${CB_LINEHEADER}Missing CB_HOME environment variable! Please install with the cb-install!" 
	echo "$CB_LINE" 
	endWithError
fi

[ "$CB_OS" = "cygwin" ] && CB_HOME=$(cygpath "$CB_HOME" 2>/dev/null) && CB_SCRIPT_PATH=$(cygpath "$CB_SCRIPT_PATH" 2>/dev/null) && CB_CURRENT_PATH=$(cygpath "$CB_CURRENT_PATH" 2>/dev/null)
[ -z "$CB_PACKAGE_URL" ] && CB_PACKAGE_URL=""
[ -z "$CB_INSTALL_USER_COMMIT" ] && CB_INSTALL_USER_COMMIT=true
[ -z "$CB_USER" ] && CB_USER=$USER
[ -z "$CB_PACKAGE_PASSWORD" ] && CB_PACKAGE_PASSWORD=""
[ -z "$CB_DEVTOOLS_JAVA_PREFIX" ] && CB_DEVTOOLS_JAVA_PREFIX="*jdk-"
[ -z "$CB_INSTALL_OVERWRITE" ] && CB_INSTALL_OVERWRITE=false

CB_INSTALL_OVERWRITE_DIST=$CB_INSTALL_OVERWRITE
CB_PROJECT_JAVA_VERSION_FILE=".java-version"
CB_JAVA_VERSION_FILE=".cb-java-version"
rm -f "$CB_JAVA_VERSION_FILE" >/dev/null 2>&1
[ -z "$CB_DEVTOOLS" ] && CB_DEVTOOLS=$(cd "$CB_HOME"/..; echo "$PWD") && export CB_DEVTOOLS
[ "$CB_OS" = "cygwin" ] && CB_DEVTOOLS=$(cygpath "$CB_DEVTOOLS")
#[ -z "$(echo $CB_OS | sed 's/cygwin.*//')" ] && CLASSSEP=";" || CLASSSEP=":"


#########################################################################
# read the common build version number
#########################################################################
readVersion() {
	if [ -r "$CB_SCRIPT_PATH/../VERSION" ]; then
		majorNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep major.number | awk '{print $3}')
		minorNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep minor.number | awk '{print $3}')
		revisionNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep revision.number | awk '{print $3}')
		qualifier=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep qualifier | awk '{print $3}')

		CB_VERSION=$majorNumber.$minorNumber.$revisionNumber
		[ -n "$qualifier" ] && CB_VERSION=$CB_VERSION-$qualifier
	fi
}


#########################################################################
# Execute custom initialisation
#########################################################################
executeCustomSettings() {
	if [ -n "$CB_CUSTOM_SETTING" ]; then	
		if [ -x "$CB_CUSTOM_SETTING" ]; then
			#echo Custom settings $CB_CUSTOM_SETTING
			CB_CUSTOM_SETTING_SCRIPT="$CB_CUSTOM_SETTING"
			export CB_CUSTOM_SETTING_SCRIPT

			# custom setting script
			eval ". $CB_CUSTOM_SETTING_SCRIPT start $*" 2>/dev/null
		else
			echo "$CB_LINE"
			echo "${CB_LINEHEADER}Could not find custom scrpit, see $CB_CUSTOM_SETTING:"
			echo "$CB_CUSTOM_SETTING"
			echo "$CB_LINE"
		fi
	fi
}


#########################################################################
# printVersion
#########################################################################
printVersion() {
	echo "$CB_LINE"
	echo "toolarium common build $CB_VERSION"
	echo "$CB_LINE"
}


#########################################################################
# printPackages
#########################################################################
printPackages() {
	readVersion
	printVersion
	#echo "available modules:"
	packages=$(cd $CB_HOME/bin/packages && find . -type f -name "*.sh" | awk -F/ '{print "  "$2}')
	echo "$packages"
	echo "$CB_LINE"
}


#########################################################################
# printUsage
#########################################################################
printUsage() {
	echo "$PN - common build v$CB_VERSION"
	echo "usage: $PN [OPTION]"
	echo ""
	echo "Overview of the available OPTIONs:"
	echo " -h, --help           Show this help message."
	echo " -v, --version        Print version information."
	echo " --new                Create a new project."
	echo " -exp, --explore      Starts in Windows environment a new explorer."
	echo " --java [version]     Set a different java version for this run, e.g. --java 14."
	echo " --silent             Suppress the console output from the common-build."
	echo " --packages           Supported packages."
	echo " --install            Install the common build environment."
	echo " --setenv             Set all environment variable and stop execution."
	echo ""
	echo "Environment variable:"
	echo " CB_DEVTOOLS          Defines the devtools directory, default \$HOME/devtools."
	echo " CB_HOME              Defines the home environment, default CB_DEVTOOLS/cb."
	echo " CB_JAVA_HOME         Defines the java version (it must be installed in a sub folder"
	echo "                      of CB_DEVTOOLS, default is empty to choose the default)"
	echo " CB_GRADLE_HOME       Defines the gradle version (similar CB_JAVA_HOME)"
	echo " CB_MAVEN_HOME        Defines the maven version (similar CB_JAVA_HOME)"
	echo " CB_ANT_HOME          Defines ant version (similar CB_JAVA_HOME)"
	echo " CB_NODE_HOME         Defines node / npm version (similar CB_JAVA_HOME)"
	echo " CB_PACKAGE_URL       Url where additional zip packages to install are available (default, no url)."
	echo " CB_PACKAGE_USER      The user for the access to the CB_PACKAGE_URL."
	echo " CB_PACKAGE_PASSWORD  In case the value is ask, the password can be entered securely "
	echo "                      on the command line."
	echo " CB_CUSTOM_SETTING    Can be use to reference to an own start script."
	echo " CB_INSTALL_OVERWRITE Defines if existing packages should be overwritten (default false)."
	echo ""
	echo "Special files:"
	echo " .java-version        Can be used to reference to a specific java version (only major"
	echo "                      version, e.g. 11)"
	echo ""
	echo "Example:"
	echo " -Install specific java version: cb --install java 14"
	echo " -Install specific gradle version: cb --install gradle 6.5"
	echo " -Install specific maven version: cb --install maven 3.6.3"
	echo " -Install specific ant version: cb --install ant 1.10.8"
	echo " -Install default node version: cb --install node"
	echo ""
	echo "Please check the homepage for more information: https://github.com/toolarium/common-build"
	echo ""
}


#########################################################################
# endPrintVariable
#########################################################################
endPrintVariable() {
	echo "$CB_LINE"
	echo "${CB_LINEHEADER}All environment variable are set, just stopped before executing $1:"
	[ "$1" = "gradle" ] && echo "   GRADLE_HOME: $GRADLE_HOME"
	[ "$1" = "maven" ] && echo "   MAVEN_HOME: $MAVEN_HOME"
	[ "$1" = "ant" ] && echo "   ANT_HOME: $ANT_HOME"
	[ "$1" = "node" ] && echo "   NODE_HOME: $NODE_HOME"
	echo "   JAVA_HOME: $JAVA_HOME"
	
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT print-variable $*" 2>/dev/null
	echo "$CB_LINE"
	exit 0
}	


#########################################################################
# checkInternetConnection
#########################################################################
checkInternetConnection() {
	CB_OFFLINE=false
	CMD=""
	
	[ -z "$CB_ONLINE_ADDRESS" ] && CB_ONLINE_ADDRESS="8.8.8.8"
	if [ "$CB_OS" = "linux" ]; then
		CMD="ping $CB_ONLINE_ADDRESS -c 1 -w 1"
	elif [ "$CB_OS" = "cygwin" ]; then
		CMD="ping $CB_ONLINE_ADDRESS 1 1"
	elif [ "$CB_OS" = "windows" ]; then
		CMD="ping $CB_ONLINE_ADDRESS -n 1 -w 1000"
	#elif [ "$CB_OS" = "mac" ]; then
	#	CMD="ping $CB_ONLINE_ADDRESS -c 1 -w 1"
	fi

	if [ -n "$CMD" ]; then
		if ! eval "$CMD" >/dev/null 2>&1; then
			CB_OFFLINE=true
		fi
	fi
}


#########################################################################
# commonBuildGradle
#########################################################################
commonBuildGradle() {
	CB_PARAMETERS="$*"
	GRADLE_EXEC=gradle
	if [ -x gradlew ]; then
		GRADLE_EXEC=./gradlew
	else
		if [ -z "$CB_GRADLE_HOME" ]; then	
			cbInstalledGradleVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*gradle*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			
			if [ -z "$cbInstalledGradleVersion" ]; then
				$PN_FULL --silent --install gradle
			    cbInstalledGradleVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*gradle*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			fi
			
			[ -z "$cbInstalledGradleVersion" ] && echo "${CB_LINEHEADER}Can not find common-build gradle version, give up!" && endWithError
			CB_GRADLE_HOME="$CB_DEVTOOLS/$cbInstalledGradleVersion"
			
			if [ -z "$(echo $CB_GRADLE_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
				echo "${CB_LINEHEADER}CB_GRADLE_HOME is not set to a gradle version in devtools ($CB_DEVTOOLS): $CB_GRADLE_HOME!"
				endWithError
			fi

			[ "$(echo ${PATH#*$CB_GRADLE_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_GRADLE_HOME/bin:$PATH" && export PATH 			
			if ! which "$GRADLE_EXEC" > /dev/null 2>&1; then
				echo "${CB_LINEHEADER}Could not find gradle version in path!"
				endWithError
			fi
		fi
	fi

	[ "$CB_SETENV" = "true" ] && endPrintVariable gradle
	[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo "${CB_LINEHEADER}Offline build!"
	
    eval "$GRADLE_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuildMaven
#########################################################################
commonBuildMaven() {
	CB_PARAMETERS="$*"
	MAVEN_EXEC=mvn
	if [ -x mvnw ]; then
		MAVEN_EXEC=./mvnw
	else
		if [ -z "$CB_MAVEN_HOME" ]; then	
		    cbInstalledMavenVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*maven*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			
			if [ -z "$cbInstalledMavenVersion" ]; then
				$PN_FULL --silent --install maven
				cbInstalledMavenVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*maven*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			fi
			
			[ -z "$cbInstalledMavenVersion" ] && echo "${CB_LINEHEADER}Can not find common-build maven version, give up!" && endWithError
			CB_MAVEN_HOME="$CB_DEVTOOLS/$cbInstalledMavenVersion"
			
			if [ -z "$(echo $CB_MAVEN_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
				echo "${CB_LINEHEADER}CB_MAVEN_HOME is not set to a maven version in devtools ($CB_DEVTOOLS): $CB_MAVEN_HOME!"
				endWithError
			fi
			
			[ "$(echo ${PATH#*$CB_MAVEN_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_MAVEN_HOME/bin:$PATH" && export PATH 			
			if ! which "$MAVEN_EXEC" > /dev/null 2>&1; then
				echo "${CB_LINEHEADER}Could not find maven version in path!"
				endWithError
			fi
		fi
	fi

	[ "$CB_SETENV" = "true" ] && endPrintVariable maven
	#[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo ${CB_LINEHEADER}Offline build!
	
    eval "$MAVEN_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuildAnt
#########################################################################
commonBuildAnt() {
	CB_PARAMETERS="$*"
	ANT_EXEC=ant
	if [ -z "$CB_ANT_HOME" ]; then	
		cbInstalledAntVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*ant*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
		
		if [ -z "$cbInstalledAntVersion" ]; then
			$PN_FULL --silent --install ant
			cbInstalledAntVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*ant*" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
		fi
		
		[ -z "$cbInstalledAntVersion" ] && echo "${CB_LINEHEADER}Can not find common-build ant version, give up!" && endWithError
		CB_ANT_HOME="$CB_DEVTOOLS/$cbInstalledAntVersion"
				
		if [ -z "$(echo $CB_ANT_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
			echo "${CB_LINEHEADER}CB_ANT_HOME is not set to a ant version in devtools ($CB_DEVTOOLS): $CB_ANT_HOME!"
			endWithError
		fi
		
		[ "$(echo ${PATH#*$CB_ANT_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_ANT_HOME/bin:$PATH" && export PATH 		
		if ! which "$ANT_EXEC" > /dev/null 2>&1; then
			echo "${CB_LINEHEADER}Could not find ant version in path!"
			endWithError
		fi
	fi

	[ "$CB_SETENV" = "true" ] && endPrintVariable ant
	#[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo ${CB_LINEHEADER}Offline build!
	
	eval "$ANT_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuild
#########################################################################
commonBuild() {
	cbJavaVersion=
	CB_JAVA_HOME_RUNTIME=

	checkInternetConnection

	if [ -r "$CB_JAVA_VERSION_FILE" ]; then
		#current run java switch
		cbJavaVersion=$(awk '{print $1}' < "$CB_JAVA_VERSION_FILE" 2>/dev/null)
		rm -f "$CB_JAVA_VERSION_FILE" >/dev/null 2>&1
		[ -n "$cbJavaVersion" ] && echo "${CB_LINEHEADER}Set java version $cbJavaVersion (by command line --java $cbJavaVersion)"
	elif [ -r "$CB_PROJECT_JAVA_VERSION_FILE" ]; then
		# project specific java switch
		cbJavaVersion=$(awk '{print $1}' < "$CB_PROJECT_JAVA_VERSION_FILE" 2>/dev/null)
		[ -n "$cbJavaVersion" ] && echo "${CB_LINEHEADER}Set project java version $cbJavaVersion (from .java-version)"
	else
		if [ -n "$CB_JAVA_HOME" ]; then
			[ "$CB_OS" = "cygwin" ] && CB_JAVA_HOME=$(cygpath "$CB_JAVA_HOME")
			CB_JAVA_HOME_RUNTIME=$CB_JAVA_HOME
			export CB_JAVA_HOME_RUNTIME
		fi
	fi

	if [ -z "$CB_JAVA_HOME_RUNTIME" ]; then
		cbJavaVersionFilter="*"
		cbInstalledJavaVersion=

		versionInformation=""
		if [ -n "$cbJavaVersion" ]; then
			versionInformation=" $cbJavaVersion"
			cbJavaVersionFilter="$cbJavaVersion*"
			[ -z "${cbJavaVersion##*[!0-9]*}" ] && echo "${CB_LINEHEADER}Invalid java version paramter $cbJavaVersion (only major version can be referenced, e.g. 11, 12...)" && endWithError
		fi

		[ -z "$CB_DEVTOOLS_JAVA_PREFIX" ] && CB_DEVTOOLS_JAVA_PREFIX="*"
		cbInstalledJavaVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "$CB_DEVTOOLS_JAVA_PREFIX$cbJavaVersionFilter" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)

		setJavaHome=false
		if [ -z "$cbInstalledJavaVersion" ]; then
			if [ -n "$cbJavaVersion" ]; then
				$PN_FULL --silent --install java "$cbJavaVersion"
			else
				$PN_FULL --silent --install java 
			fi

			cbInstalledJavaVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "$CB_DEVTOOLS_JAVA_PREFIX$cbJavaVersionFilter" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			[ -z "$cbInstalledJavaVersion" ] && echo "${CB_LINEHEADER}Can not find common-build java version${versionInformation}, give up!" && endWithError
			setJavaHome=true
		fi
		CB_JAVA_HOME_RUNTIME="$CB_DEVTOOLS/$cbInstalledJavaVersion"
		CB_JAVA_HOME=$CB_JAVA_HOME_RUNTIME
		export CB_JAVA_HOME CB_JAVA_HOME_RUNTIME
		
		if [ "$setJavaHome" = "true" ]; then
			shellProfile="$HOME/.bashrc"
			if [ -w "$shellProfile" ]; then
				if [ -z "$(cat $shellProfile | grep 'toolarium-common-build / default java version support')" ]; then
					echo "${CB_LINEHEADER}Set CB_JAVA_HOME to $CB_JAVA_HOME_RUNTIME as default!"
					backupFileName="${shellProfile}_cb-$(eval $FULLTIMESTAMP)"
					cp "$shellProfile" "$backupFileName" >/dev/null 2>&1 && chmod +r "$backupFileName" >/dev/null 2>&1
				
					echo "${CB_LINEHEADER}Modify file $shellProfile" 
					echo "" >> "$shellProfile"
					echo "# toolarium-common-build / default java version support" >> "$shellProfile"
					echo "export CB_JAVA_HOME=$CB_JAVA_HOME" >> "$shellProfile"
				fi
			else
				echo "${CB_LINEHEADER}Can not set CB_JAVA_HOME in $shellProfile, it's write protected!"
			fi
		fi
	fi

	#if [ -z "$CB_JAVA_HOME_RUNTIME" ]; then
	if [ -z "$(echo $CB_JAVA_HOME_RUNTIME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
		echo "${CB_LINEHEADER}CB_JAVA_HOME is not set to a java version in devtools ($CB_DEVTOOLS): $CB_JAVA_HOME_RUNTIME!"
		endWithError
	fi
	
	if ! [ -x "$CB_JAVA_HOME_RUNTIME/bin/javac" ]; then
		echo "${CB_LINEHEADER}CB_JAVA_HOME entry could not be found: $CB_JAVA_HOME_RUNTIME!"
		endWithError
	fi
	
	JAVA_HOME=$CB_JAVA_HOME_RUNTIME
	export JAVA_HOME
	[ "$(echo ${PATH#*$CB_JAVA_HOME_RUNTIME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_JAVA_HOME_RUNTIME/bin:$PATH" && export PATH 
	#&& echo ${CB_LINEHEADER}Set $CB_JAVA_HOME_RUNTIME to path! 
		
	if ! which javac> /dev/null 2>&1; then
		echo "${CB_LINEHEADER}Could not find java version in path!"
		endWithError
	fi	


	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT build-start $*" 2>/dev/null
	
	# decide which build tool to use
	if [ -r "$CB_CURRENT_PATH/build.gradle" ]; then
		commonBuildGradle "$@"
	elif [ -r "$CB_CURRENT_PATH/pom.xml" ]; then
		commonBuildMaven "$@"
	elif [ -r "$CB_CURRENT_PATH/build.xml" ]; then
		commonBuildAnt "$@"
	else
		commonBuildGradle "$@"
	fi
		
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT build-end $*" 2>/dev/null
	exit $errorCode
}
	
	
#########################################################################
# checkHttpRequestCLI
#########################################################################
checkHttpRequestCLI() {
	which curl >/dev/null 2>&1 && echo "curl" && return
	which wget >/dev/null 2>&1 && echo "wget" && return
	echo ""
}


#########################################################################
# download files
#########################################################################
downloadFiles() {
	errorCode=1
	if [ -z "$2" ]; then			
		! which wget >/dev/null 2>&1 && echo "${CB_LINEHEADER}Can not download wildcard by curl, please install wget!" | tee -a "$CB_LOGFILE" && return
	fi

	#CB_USER_AGENT="--user-agent=\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\""
    if [ "$HTTP_REQUEST_CLI" = "curl" ]; then
		! [ -n "$CB_CURL_PARAM" ] && CB_CURL_PARAM="-L -C -"
		#! [ -n "$CB_CURL_PARAM" ] && CB_CURL_PARAM="-L"
		! [ -n "$CB_CURL_SECURITY_CREDENTIALS" ] && CB_CURL_SECURITY_CREDENTIALS="--insecure"
		! [ -n "$CB_CURL_PROGRESSBAR" ] && CB_CURL_PROGRESSBAR="-#" && CB_CURL_LOG=" "
		#CB_CURL_USER_CREDENTIALS="-u <user:password>
		! [ -n "$CB_CURL_USER_CREDENTIALS" ] && CB_CURL_USER_CREDENTIALS=" "
		! [ -n "$CB_CURL_LOG" ] && CB_CURL_LOG="-Ss"
		#echo "$HTTP_REQUEST_CLI $CB_CURL_PARAM $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_PROGRESSBAR $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 $1" 
		#2>>$CB_LOGFILE
		CB_LAST_CMD="$HTTP_REQUEST_CLI $CB_CURL_PARAM $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_PROGRESSBAR $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 $1" 
		eval $HTTP_REQUEST_CLI $CB_CURL_PARAM $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_PROGRESSBAR $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o "$2" "$1" 
		#&> /dev/stdout | tee -a "$CB_LOGFILE"
		errorCode=$?

		if [ $errorCode -eq 33 ]; then
			CB_CURL_PARAM="-L"
			CB_LAST_CMD="$HTTP_REQUEST_CLI $CB_CURL_PARAM $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_PROGRESSBAR $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 $1" 
			eval $HTTP_REQUEST_CLI "$CB_CURL_PARAM $CB_CURL_SECURITY_CREDENTIALS" "$CB_CURL_PROGRESSBAR" "$CB_CURL_USER_CREDENTIALS" "$CB_CURL_LOG" -o "$2" "$1" 
			#&> /dev/stdout | tee -a "$CB_LOGFILE"
			errorCode=$?
		fi
    else
		! [ -n "$CB_WGET_PARAM" ] && CB_WGET_PARAM="-c"
		! [ -n "$CB_WGET_SECURITY_CREDENTIALS" ] && CB_WGET_SECURITY_CREDENTIALS="--trust-server-names --no-check-certificate"
		! [ -n "$CB_WGET_PROGRESSBAR" ] && CB_WGET_PROGRESSBAR="--show-progress"
		! [ -n "$CB_WGET_USER_CREDENTIALS" ] && CB_WGET_USER_CREDENTIALS=" "
		! [ -n "$CB_WGET_LOG" ] && CB_WGET_LOG="-a $CB_LOGFILE"
	
		if [ -z $2 ]; then	
			! [ -n "$CB_WGET_FILTER" ] && CB_WGET_FILTER="--exclude-directories=_deprecated -R \"index.*\""
			! [ -n "$CB_WGET_RECURSIVE_PARAM" ] && CB_WGET_RECURSIVE_PARAM="-r -np -nH --timestamping"
			echo "$HTTP_REQUEST_CLI $1 $CB_WGET_RECURSIVE_PARAM $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_FILTER $CB_WGET_LOG"
			CB_LAST_CMD="$HTTP_REQUEST_CLI $1 $CB_WGET_RECURSIVE_PARAM $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_FILTER $CB_WGET_LOG"
			eval $HTTP_REQUEST_CLI "$1" "$CB_WGET_RECURSIVE_PARAM" "$CB_WGET_PARAM" "$CB_WGET_SECURITY_CREDENTIALS" "$CB_WGET_PROGRESSBAR" "$CB_WGET_USER_CREDENTIALS" "$CB_WGET_FILTER" "$CB_WGET_LOG"
		else
			CB_LAST_CMD="$HTTP_REQUEST_CLI -O $2 $1 $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_LOG" 
			eval $HTTP_REQUEST_CLI -O "$2" "$1" "$CB_WGET_PARAM" "$CB_WGET_SECURITY_CREDENTIALS" "$CB_WGET_PROGRESSBAR" "$CB_WGET_USER_CREDENTIALS" "$CB_WGET_LOG" 
        fi
		
		errorCode=$?
    fi
}


#########################################################################
# downloadPackage
#########################################################################
downloadPackage() {
	if [ -z $1 ]; then
		echo "${CB_LINEHEADER}Error occured in download: Missing package name!" | tee -a "$CB_LOGFILE"
		return
	fi
	
	errorCode=
	CB_PACKAGE_NAME=$1
	CB_PACKAGE_VERSION=
	CB_PACKAGE_BASE_URL=
	CB_PACKAGE_DOWNLOAD_NAME=
	CB_PACKAGE_VERSION_NAME=
	CB_PACKAGE_DOWNLOAD_URL=
	shift

	if [ -x "$CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh" ]; then
		# we expecte:
		# 1) the CB_PACKAGE_VERSION contains the version which will be installed (optional)
		# 2) the CB_PACKAGE_DOWNLOAD_NAME contains the package name which will be downloaded; at the end of the download we have this file (mandatory)
		# 3) the CB_PACKAGE_BASE_URL contains the base package url to download; if this is defined then the CB_PACKAGE_DOWNLOAD_URL can be empty
		# 4) the CB_PACKAGE_DOWNLOAD_URL contains the package url to download; in case we have the CB_PACKAGE_BASE_URL then this is not necessary

		# call package specific settings
		#echo . $CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh $2
		eval ". $CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh $2"

		# supported environment variables from cb: CB_LINE, CB_LOGFILE, CB_DEVTOOLS, CB_DEV_REPOSITORY, CB_WGET_CALL 
		if [ -z "$CB_PACKAGE_DOWNLOAD_URL" ]; then 
			if [ -z "$CB_PACKAGE_BASE_URL" ]; then
				echo "${CB_LINEHEADER}Could not found expected environment variable \$CB_PACKAGE_BASE_URL" | tee -a "$CB_LOGFILE"
				errorCode=1
				return
			else
				CB_PACKAGE_DOWNLOAD_URL=$CB_PACKAGE_BASE_URL/$CB_PACKAGE_DOWNLOAD_NAME
			fi
		fi
		
		if [ -z "$CB_PACKAGE_DOWNLOAD_NAME" ]; then 		
			echo "${CB_LINEHEADER}Could not found expected environment variable \$CB_PACKAGE_DOWNLOAD_NAME" | tee -a "$CB_LOGFILE"
			errorCode=1
			return
		else		
			[ -z "$CB_PACKAGE_VERSION_NAME" ] && CB_PACKAGE_VERSION_NAME=$CB_PACKAGE_DOWNLOAD_NAME
			
			# overwrite
			[ "$CB_INSTALL_OVERWRITE_DIST" = "true" ] && rm -rf $CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME >/dev/null 2>&1
				
			# if we already have it we ignore
			if ! [ -r "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" ]; then
				echo "${CB_LINEHEADER}Download $CB_PACKAGE_NAME version $CB_PACKAGE_VERSION" | tee -a "$CB_LOGFILE"
				if cd "$CB_DEV_REPOSITORY"; then
					downloadFiles "$CB_PACKAGE_DOWNLOAD_URL" "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME"
					cd "$CB_CURRENT_PATH"
					[ $errorCode -ne 0 ] && echo "${CB_LINEHEADER}Error occured by download, give up!" | tee -a "$CB_LOGFILE"
					[ $errorCode -ne 0 ] && echo "${CB_LINEHEADER}Call: $CB_LAST_CMD" | tee -a "$CB_LOGFILE"
				fi
				
				# in case it is zero size we delete it
				if [ -r "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" ]; then 
					[ $(stat -c %s $CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME) -eq 0 ] && rm -rf "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" >/dev/null 2>&1
				fi
			fi
		fi
	else
		echo "${CB_LINEHEADER}Package $CB_PACKAGE_NAME is currently not supported!" | tee -a "$CB_LOGFILE"
		errorCode=1
	fi
}


#########################################################################
# installCb
#########################################################################
installCb() {
	DATEFORMAT="date '+%d.%m.%Y %H:%M:%S'"
	USER_FRIENDLY_FULLTIMESTAMP=$(eval "$DATEFORMAT")
	FULLTIMESTAMP=$(date '+%Y%m%d-%H%M%S')

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-start $*" 2>/dev/null
	
	if [ "$CB_INSTALL_SILENT" = "false" ]; then
		echo "$CB_LINE"
		echo "${CB_LINEHEADER}Start common-build installation on $(hostname), $USER_FRIENDLY_FULLTIMESTAMP"
		echo "${CB_LINEHEADER}Use $CB_DEVTOOLS path as devtools folder"
		echo "$CB_LINE"
	fi

	HTTP_REQUEST_CLI=$(checkHttpRequestCLI)
	CB_BIN=$CB_HOME/bin
	CB_LOGS=$CB_HOME/logs
	CB_DEV_REPOSITORY=$CB_DEVTOOLS/.repository
	CB_LOGFILE=$CB_LOGS/$FULLTIMESTAMP-$CB_USER.log

	! [ -d "$CB_DEVTOOLS" ] && mkdir -p "$CB_DEVTOOLS" 2>/dev/null
	! [ -d "$CB_HOME" ] && mkdir -p "$CB_HOME" 2>/dev/null
	! [ -d "$CB_BIN" ] && mkdir -p "$CB_BIN" 2>/dev/null
	! [ -d "$CB_LOGS" ] && mkdir -p "$CB_LOGS" 2>/dev/null
	! [ -d "$CB_DEV_REPOSITORY" ] && mkdir -p "$CB_DEV_REPOSITORY" 2>/dev/null

	echo "$CB_LINE" >> "$CB_LOGFILE"
	echo "Started common-build installation on $(hostname), $USER_FRIENDLY_FULLTIMESTAMP" >> "$CB_LOGFILE"
	echo "common-build: $CB_HOME" >> "$CB_LOGFILE"
	echo "devtools: $CB_DEVTOOLS" >> "$CB_LOGFILE"
	# echo wget: $CB_WGET_VERSION, gradle: $CB_GRADLE_VERSION, java: $CB_JAVA_VERSION>> "$CB_LOGFILE"
	echo "$CB_LINE" >> "$CB_LOGFILE"

	CB_PROCESSOR_ARCHITECTURE_NUMBER=$(getconf LONG_BIT)
	[ -z "$CB_PROCESSOR_ARCHITECTURE_NUMBER" ] && CB_PROCESSOR_ARCHITECTURE_NUMBER=64

	if [ -z "$1" ]; then
		CB_PKG_FILTER="*.zip" 
		CB_PKG_FILTER_WILDCARD="true"
	elif [ "$1" = "pkg" ]; then
		CB_PKG_FILTER="*.zip" 
		CB_PKG_FILTER_WILDCARD="true"
	else
		CB_PKG_FILTER=
		CB_PKG_FILTER_WILDCARD="false"
	fi
	
	if [ "$CB_PKG_FILTER_WILDCARD" = "true" ]; then
		# custom setting script
		[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-package-start $*" 2>/dev/null


		if [ -n "$CB_PACKAGE_URL" ]; then
			CB_WGET_USER_CREDENTIALS=			
			if [ -z "$CB_PACKAGE_USER" ]; then
				echo "Please enter user credentials, e.g. $CB_USER:"
				read -r CB_PACKAGE_USER
				[ -z "$CB_PACKAGE_USER" ] && CB_PACKAGE_USER=$CB_USER
			fi			
			[ "$CB_PACKAGE_PASSWORD" = "ask" ] && CB_WGET_USER_CREDENTIALS="--ask-password --user $CB_PACKAGE_USER"
			
			echo "$CB_LINE" >> "$CB_LOGFILE"
			echo "${CB_LINEHEADER}Install packages from $CB_PACKAGE_URL && echo ${CB_LINEHEADER}Install packages from $CB_PACKAGE_URL" >> "$CB_LOGFILE"
			if cd "$CB_DEV_REPOSITORY"; then
				downloadFiles "$CB_PACKAGE_URL"		
				cd "$CB_CURRENT_PATH"
			fi
			
			if [ $errorCode -eq 0 ]; then 
				echo "$CB_LINE" | tee -a "$CB_LOGFILE"
				echo "ERROR: Invalid credentials, give up." | tee -a "$CB_LOGFILE"
				echo "$CB_LINE" | tee -a "$CB_LOGFILE"
				endWithError
			fi

			echo "$CB_LINE" >> "$CB_LOGFILE"
		fi

		# custom setting script
		[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-package-end $*" 2>/dev/null
	else
		downloadPackage "$1" "$2"
		[ -n "$CB_PACKAGE_DOWNLOAD_NAME" ] && CB_PKG_FILTER=$CB_PACKAGE_DOWNLOAD_NAME 
	fi
	
	CB_TAR_PARAM="-k"
	CB_UNZIP_PARAM="-n"
	CB_XZ_PARAM="-k"
	[ "$CB_INSTALL_OVERWRITE_DIST" = "true" ] && CB_UNZIP_PARAM="-o" && CB_TAR_PARAM="--overwrite" && CB_XZ_PARAM="-f"
	[ -n "$CB_PACKAGE_DEST_VERSION_NAME" ] && mkdir -p $CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME >/dev/null 2>&1 && CB_UNZIP_PARAM="$CB_UNZIP_PARAM -d $CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME" && CB_TAR_PARAM="-C $CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME"
	
	# extract
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT extract-archive-start $*" 2>/dev/null

	if [ -n "$CB_PKG_FILTER" ]; then
		#[ "$CB_PKG_FILTER_WILDCARD" == "true" ] && 
		echo "$CB_LINE" >> "$CB_LOGFILE"
		echo "${CB_LINEHEADER}Extract $CB_PKG_FILTER in $CB_DEVTOOLS..." | tee -a "$CB_LOGFILE"
		for i in $(ls -1 "$CB_DEV_REPOSITORY/$CB_PKG_FILTER" 2>/dev/null)
		do
			echo "${CB_LINEHEADER}Extract package $i" >> "$CB_LOGFILE"

			if [ -z "${i%%*.zip}" ]; then
				if ! which unzip >/dev/null 2>&1; then
					echo "${CB_LINEHEADER}Could not find unzip, please install unzip!"
					CMD=""
				else
					[ -z "${i%%*.zip}" ] && CMD="unzip $CB_UNZIP_PARAM $i"
				fi				
			elif [ -z "${i%%*.exe}" ]; then
				[ "$CB_OS" = "cygwin" ] && eval $i >> "$CB_LOGFILE"
			elif [ -z "${i%%*.sh}" ]; then
				eval $i >> "$CB_LOGFILE"
			else			
				[ -z "${i%%*.tar}" ] && CMD="tar $CB_TAR_PARAM -xf $i"
				[ -z "${i%%*.tar.gz}" ] && CMD="tar $CB_TAR_PARAM -zxf $i"
				[ -z "${i%%*.tgz}" ] && CMD="tar $CB_TAR_PARAM -zxf $i"
				[ -z "${i%%*.xz}" ] && CMD="xz $CB_XZ_PARAM --decompress $i"
			fi
			
			if [ -n "$CMD" ]; then
				CB_INSTALL_ERRORFILE=$CB_LOGS/$FULLTIMESTAMP-$CB_USER-error.log
				if ! eval "cd $CB_DEVTOOLS && $CMD 2>$CB_INSTALL_ERRORFILE" >> "$CB_LOGFILE"; then 
					echo "${CB_LINEHEADER}Could not extract $i:"
					cat "$CB_INSTALL_ERRORFILE"
				fi
				rm -f "$CB_INSTALL_ERRORFILE" >/dev/null 2>&1
			fi
		done
		echo "$CB_LINE" >> "$CB_LOGFILE"
	else
		echo "${CB_LINEHEADER}No package found $CB_PACKAGE_VERSION_NAME ($CB_PKG_FILTER)"
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT extract-archive-end $*" 2>/dev/null

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-end $*" 2>/dev/null
	
	[ "$CB_INSTALL_SILENT" = "false" ] && echo "$CB_LINE"
}


#########################################################################
# projectWizard
#########################################################################
projectWizard() {
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT new-project-start $*" 2>/dev/null
	
	if eval ". $ABS_PROG_PATH/include/project-wizard.sh $@"; then
		eval "cd $projectName && $ABS_PROG_PATH/$PN -PprojectType=$projectType -PprojectRootPackageName=$projectRootPackageName -PprojectGroupId=$projectGroupId -PprojectComponentId=$projectComponentId -PprojectDescription='$projectDescription'"

		# custom setting script
		[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT new-project-end $*" 2>/dev/null
	else
		endWithError
	fi
}


#########################################################################
# exploreProject
#########################################################################
exploreProject()
{
	fileExplorer=
	[ "$CB_OS" = "windows" ] && fileExplorer=$(which explorer.exe 2>/dev/null)
	[ "$CB_OS" = "cygwin" ] && fileExplorer=$(which explorer.exe 2>/dev/null)

	if [ -n "$fileExplorer" ]; then
		if [ -x "$fileExplorer" ]
		then
			currentWindowDirectory="$(cygpath --windows $CB_CURRENT_PATH)"	
			$fileExplorer "$currentWindowDirectory"
		else
			echo "$CB_LINE"
			echo "${CB_LINEHEADER}Could not found explorer.exe!"
			echo "$CB_LINE"
		fi
	else
		echo "${CB_LINEHEADER}This functionality is not supported by this os ($CB_OS)!"	
	fi
}


#########################################################################
# main
#########################################################################
CB_SETENV=false
CB_PARAMETERS=""
executeCustomSettings "$CB_PARAMETERS"

while [ $# -gt 0 ]
do
    case "$1" in
		--silent) CB_INSTALL_USER_COMMIT=false; CB_INSTALL_SILENT=true;;
		-h)	readVersion; printUsage; exit 0;;
		--help)	readVersion; printUsage; exit 0;;
		-v) readVersion; printVersion; exit 0;;
		--version) readVersion; printVersion; exit 0;;
		-new)		shift; projectWizard "$@"; exit 0;;
		--new)		shift; projectWizard "$@"; exit 0;;
		-exp)		shift; exploreProject; exit 0;;	
		--explore)	shift; exploreProject; exit 0;;	
		--force)	CB_INSTALL_OVERWRITE_DIST="true";;
		--install)	shift; installCb "$@"; exit 0;;	
		--packages)	shift; printPackages "$@"; exit 0;;	
		--java)		shift && echo $1 > $CB_JAVA_VERSION_FILE;;	
		--setenv)	CB_SETENV=true;;	
		*)	CB_PARAMETERS="$CB_PARAMETERS \"$1\"";;
    esac
    shift
done

commonBuild "$CB_PARAMETERS"


#########################################################################
#  EOF
#########################################################################