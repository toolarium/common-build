#!/bin/bash

#########################################################################
#
# cb
#
# Copyright by toolarium, all rights reserved.
# MIT License: https://mit-license.org
#
#########################################################################


CB_LINE="----------------------------------------------------------------------------------------"
CB_LINEHEADER=".: "
PN=$(basename "$0" 2>/dev/null)
PN_FULL="$0"
#REL_PROG_PATH="${0%/*}"
ABS_PROG_PATH=$(cd -- "`dirname $0 2>/dev/null`" && pwd)

CB_SCRIPT_PATH=$(dirname "$0" 2>/dev/null)
CB_WORKING_PATH=$PWD
CB_INSTALL_SILENT="false"
CB_OS="linux"
FULLTIMESTAMP="date '+%Y%m%d%H%M%S'"

# detect the platform (similar to $OSTYPE)
CB_OS="$(uname | tr '[:upper:]' '[:lower:]')"
CB_OS=$(echo "$CB_OS" | awk '{print substr($0, 0, 7)}')
case $CB_OS in
	'linux') CB_OS="linux";;
	'freebsd') CB_OS="freebsd";;
	'windows') CB_OS="windows";;
	'mac') CB_OS="mac";;
	'darwin') CB_OS="mac";;
	'sunos') CB_OS="solaris";;
	'cygwin') CB_OS="cygwin";;
	'cygwin_') CB_OS="cygwin";;
	'aix') CB_OS="aix";;
	*) ;;
esac
CB_MACHINE="$(uname -m | tr '[:upper:]' '[:lower:]')"
export CB_OS CB_MACHINE
export CB_LINE CB_LINEHEADER


#########################################################################
# Check if the binary exists
#########################################################################
CB_HAS_WHEREIS=
CB_HAS_WHICH=
existBinary() {
	if [ -z "$CB_HAS_WHEREIS" ]; then
		eval whereis whereis >/dev/null 2>&1				
		[ $? -eq 0 ] && CB_HAS_WHEREIS=true || CB_HAS_WHEREIS=false
	fi
	if [ "$CB_HAS_WHEREIS" = "false" ]; then
		if [ -z "$CB_HAS_WHICH" ]; then
			which which >/dev/null 2>&1
			[ $? -eq 0 ] && CB_HAS_WHICH=true || CB_HAS_WHICH=false
		fi
		if [ "$CB_HAS_WHICH" = "false" ]; then
			echo "${CB_LINEHEADER}Can not find which nor whereis command!" 
			return 1
		fi
	fi

	if [ "$CB_HAS_WHEREIS" = "true" ]; then
		if [ "$CB_OS" = "mac" ]; then
			result=$(whereis "$1" 2>/dev/null)
		else
			result=$(whereis -b "$1" 2>/dev/null | awk '{print $2}')
		fi
		
		[ -n "$result" ] && echo "$result"
		[ -n "$result" ] && return 0 || return 1
	else
		result=$(which "$1" 2>/dev/null)
		[ -n "$result" ] && echo "$result"
		[ $? -eq 0 ] && return 0 || return 1
	fi
}


#########################################################################
# Get the file size (gnu linux: stat -c %s, max: stat -f %z)
#########################################################################
getFileSize() {
	set -- $(\ls -dn "$1") && echo $5;
}


#########################################################################
# End with error
#########################################################################
endWithError() {
	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT error-end $*" 2>/dev/null
	exit 1
}

if [ -z "$CB_HOME" ]; then
	echo "$CB_LINE"
	echo "${CB_LINEHEADER}Missing CB_HOME environment variable, please install with the cb-install."
	echo "$CB_LINE"
	endWithError
fi
if ! [ -n "$(existBinary find)" ]; then
	echo "$CB_LINE"
	echo "${CB_LINEHEADER}Missing package find, please install it before you continue."
	echo "$CB_LINE"
	endWithError
fi

[ "$CB_OS" = "cygwin" ] && CB_HOME=$(cygpath "$CB_HOME" 2>/dev/null) && CB_SCRIPT_PATH=$(cygpath "$CB_SCRIPT_PATH" 2>/dev/null) && CB_WORKING_PATH=$(cygpath "$CB_WORKING_PATH" 2>/dev/null)
[ -z "$CB_PACKAGE_URL" ] && CB_PACKAGE_URL=""
[ -z "$CB_INSTALL_USER_COMMIT" ] && CB_INSTALL_USER_COMMIT=true
[ -z "$CB_USER" ] && CB_USER=$USER
[ -z "$CB_PACKAGE_PASSWORD" ] && CB_PACKAGE_PASSWORD=""
[ -z "$CB_DEVTOOLS_JAVA_PREFIX" ] && CB_DEVTOOLS_JAVA_PREFIX="*jdk-"
[ -z "$CB_INSTALL_OVERWRITE" ] && CB_INSTALL_OVERWRITE=false

CB_INSTALL_OVERWRITE_DIST=$CB_INSTALL_OVERWRITE
CB_PROJECT_JAVA_VERSION_FILE=".java-version"
CB_JAVA_VERSION_FILE=".cb-java-version"
rm -f "$CB_JAVA_VERSION_FILE" >/dev/null 2>&1
[ -z "$CB_DEVTOOLS" ] && CB_DEVTOOLS=$(cd "$CB_HOME"/.. 2>/dev/null; echo "$PWD") && export CB_DEVTOOLS
[ "$CB_OS" = "cygwin" ] && CB_DEVTOOLS=$(cygpath "$CB_DEVTOOLS")
#[ -z "$(echo $CB_OS | sed 's/cygwin.*//')" ] && CLASSSEP=";" || CLASSSEP=":"
CB_TOOL_VERSION_DEFAULT="$CB_HOME/conf/tool-version-default.properties"
CB_TOOL_VERSION_INSTALLED="$CB_HOME/conf/tool-version-installed.properties"
CB_TOOL_VERSION_DEFAULT_URL="https://raw.githubusercontent.com/toolarium/common-build/master/conf/tool-version-default.properties"
CB_SET_DEFAULT=false
CB_CURRENT_PATH=$CB_HOME/current
! [ -d "$CB_CURRENT_PATH" ] && mkdir -p "$CB_CURRENT_PATH" 2>/dev/null


#########################################################################
# read the common build version number
#########################################################################
readVersion() {
	if [ -r "$CB_SCRIPT_PATH/../VERSION" ]; then
		majorNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep major.number | awk '{print $3}')
		minorNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep minor.number | awk '{print $3}')
		revisionNumber=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep revision.number | awk '{print $3}')
		qualifier=$(cat "$CB_SCRIPT_PATH/../VERSION" | tr -d '\r' | grep qualifier | awk '{print $3}')

		CB_VERSION=$majorNumber.$minorNumber.$revisionNumber
		[ -n "$qualifier" ] && CB_VERSION=$CB_VERSION-$qualifier

        export CB_VERSION
	fi
}


#########################################################################
# Execute custom initialisation
#########################################################################
executeCustomSettings() {
	if [ -n "$CB_CUSTOM_SETTING" ]; then
		if [ -x "$CB_CUSTOM_SETTING" ]; then
			#echo Custom settings $CB_CUSTOM_SETTING
			CB_CUSTOM_SETTING_SCRIPT="$CB_CUSTOM_SETTING"
			export CB_CUSTOM_SETTING_SCRIPT

			# custom setting script
			eval ". $CB_CUSTOM_SETTING_SCRIPT start $*" 2>/dev/null
		else
			echo "$CB_LINE"
			echo "${CB_LINEHEADER}Could not find custom scrpit, see $CB_CUSTOM_SETTING:"
			echo "$CB_CUSTOM_SETTING"
			echo "$CB_LINE"
		fi
	fi
}


#########################################################################
# checkInternetConnection
#########################################################################
checkInternetConnection() {
	[ -z "$CB_ONLINE_ADDRESS" ] && CB_ONLINE_ADDRESS="8.8.8.8"
	[ -z "$CB_ONLINE_ADDRESS_PORT" ] && CB_ONLINE_ADDRESS_PORT="53"
	[ -z "$CB_ONLINE_TIMEOUT" ] && CB_ONLINE_TIMEOUT="2"
	timeout "$CB_ONLINE_TIMEOUT bash" -c "</dev/tcp/$CB_ONLINE_ADDRESS/$CB_ONLINE_ADDRESS_PORT" >/dev/null 2>&1 && CB_OFFLINE=true || CB_OFFLINE=false
}


#########################################################################
# printUsage
#########################################################################
printUsage() {
	echo "$PN - common build v$CB_VERSION"
	echo "usage: $PN [OPTION]"
	echo ""
	echo "Overview of the available OPTIONs:"
	echo " -h, --help           Show this help message."
	echo " -v, --version        Print the version information."
	echo " --new                Create a new project. You can prefill wizard settings "
	echo "                      by setting the corresponding entries as parameter, e.g."
	echo "                      --new 1 my-project my.root.pkg my my"
	echo " --java [version]     Set a different java version for this run, e.g. --java 14."
	echo " --silent             Suppress the console output from the common-build."
	echo " --force              Flag to force new installtion."
	echo " --offline            Set the offline mode; it will be detect automatically."
 	echo " --install [pkg]      Install the a software package. Optionally you can set the"
	echo "                      version number (does not work for every package); otherwise"
	echo "                      the default version number is used (from the configuration"
	echo "                      file tool-version-default.properties)"
    echo "                      Additionally a parameter -d or --default marks this version "
    echo "                      as default."
	echo " --packages           Shows the supported packages."
	echo " -exp, --explore      Starts the file explorer with the current path."
	echo " --setenv             Set all internal used environment variables."
	echo ""
	echo "Environment variable:"
	echo " CB_DEVTOOLS          Defines the devtools directory, default \$HOME/devtools."
	echo " CB_HOME              Defines the home environment, default \$CB_DEVTOOLS/cb."
	echo ""
	echo "Special files:"
	echo " .java-version        Can be used to refer to a specific java version, e.g. 11"
	echo ""
	echo "Customizing:"
	echo " CB_CUSTOM_SETTING    The common build is flexible. You can define a script which"
	echo "                      that is called as a hook for all operations. You can find an"
	echo "                      example sciipt in \$CB_HOME/bin/sample/cb-custom-sample.sh"
	echo " CB_PACKAGE_URL       To support software packages outside the common build, you "
	echo "                      can define an URL that covers a directory of zip files."
	echo " CB_PACKAGE_USER      The user for accessing the CB_PACKAGE_URL."
	echo " CB_PACKAGE_PASSWORD  In case the value is ask, the password can be entered securely "
	echo "                      on the command line."
	echo ""
	
	eval "$ABS_PROG_PATH/include/how-to.sh" 2>/dev/null
}


#########################################################################
# printVersion
#########################################################################
printVersion() {
	echo "$CB_LINE"
	echo "toolarium common build $CB_VERSION"
	echo "$CB_LINE"
}


#########################################################################
# projectWizard
#########################################################################
projectWizard() {
	projectStartParameter=""

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT new-project-start $*" 2>/dev/null

	if eval ". $ABS_PROG_PATH/include/project-wizard.sh $@"; then
		# custom setting script
		[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT new-project-end $*" 2>/dev/null
	else
		endWithError
	fi
}


#########################################################################
# exploreProject
#########################################################################
exploreProject()
{
	[ "$CB_OS" = "windows" ] && fileExplorer=$(existBinary explorer.exe)
	[ "$CB_OS" = "cygwin" ] && fileExplorer=$(existBinary explorer.exe)
	[ "$CB_OS" = "mac" ] && fileExplorer=$(existBinary open)

	if [ "$CB_OS" = "linux" ]; then
		fileExplorer=$(existBinary xdg-open)
		
		# kde
		[ -n "$fileExplorer" ] || fileExplorer=$(existBinary dolphin)
		
		# gnome
		[ -n "$fileExplorer" ] || fileExplorer=$(existBinary gnome-open)
		[ -n "$fileExplorer" ] || fileExplorer=$(existBinary nautilus)
	fi

	if [ -n "$fileExplorer" ]; then
		if [ -x "$fileExplorer" ]
		then
			exploreDirectory="$CB_WORKING_PATH"
			[ "$CB_OS" = "cygwin" ] && exploreDirectory="$(cygpath --windows $CB_WORKING_PATH)"
			$fileExplorer "$exploreDirectory" >/dev/null 2>&1 &
		else
			echo "$CB_LINE"
			echo "${CB_LINEHEADER}Could not found explorer.exe."
			echo "$CB_LINE"
		fi
	else
		echo "${CB_LINEHEADER}This functionality is not supported by this os installation ($CB_OS/$CB_MACHINE)."
	fi
}


#########################################################################
# printPackages
#########################################################################
printPackages() {
	readVersion
	printVersion
	packages=$(cd $CB_HOME/bin/packages && find . -type f -name "*.sh" | awk -F/ '{print "  "$2}')
	echo "  cb"
	echo "$packages"
	echo "$CB_LINE"
}


#########################################################################
# setCBEnv
#########################################################################
setCBEnv() {
	shift
	[ "$1" = "--silent" ] && shift && CB_INSTALL_SILENT=true

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT setenv-start $*" 2>/dev/null

	if [ -d "$CB_CURRENT_PATH/node" ]; then
		CB_NODE_HOME=$CB_CURRENT_PATH/node && NODE_HOME=$CB_NODE_HOME
		[ -z "$(echo $PATH | grep $NODE_HOME)" ] && PATH="$NODE_HOME:$PATH" && [ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Add node to path ($NODE_HOME)."
		export CB_NODE_HOME NODE_HOME
	fi

	if [ -d "$CB_CURRENT_PATH/ant" ]; then
		CB_ANT_HOME=$CB_CURRENT_PATH/ant && ANT_HOME=$CB_ANT_HOME
		[ -z "$(echo $PATH | grep $ANT_HOME/bin)" ] && PATH="$ANT_HOME/bin:$PATH" && [ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Add ant to path ($ANT_HOME/bin)."
		export CB_ANT_HOME ANT_HOME
	fi

	if [ -d "$CB_CURRENT_PATH/maven" ]; then
		CB_MAVEN_HOME=$CB_CURRENT_PATH/maven && MAVEN_HOME=$CB_MAVEN_HOME
		[ -z "$(echo $PATH | grep $MAVEN_HOME/bin)" ] && PATH="$MAVEN_HOME/bin:$PATH" && [ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Add maven to path ($MAVEN_HOME/bin)."
		export CB_MAVEN_HOME MAVEN_HOME
	fi

	if [ -d "$CB_CURRENT_PATH/gradle" ]; then
		CB_GRADLE_HOME=$CB_CURRENT_PATH/gradle && GRADLE_HOME=$CB_GRADLE_HOME
		[ -z "$(echo $PATH | grep $GRADLE_HOME/bin)" ] && PATH="$GRADLE_HOME/bin:$PATH" && [ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Add gradle to path ($GRADLE_HOME/bin)."
		export CB_GRADLE_HOME GRADLE_HOME
	fi

	if [ -d "$CB_CURRENT_PATH/java" ]; then
		CB_JAVA_HOME=$CB_CURRENT_PATH/java &&JAVA_HOME=$CB_JAVA_HOME
		[ -z "$(echo $PATH | grep $JAVA_HOME/bin)" ] && PATH="$JAVA_HOME/bin:$PATH" && [ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Add java to path ($JAVA_HOME/bin)."
		export CB_JAVA_HOME JAVA_HOME PATH
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT setenv-end $*" 2>/dev/null

	unset CB_OS
	unset CB_MACHINE
	unset CB_LINE
	unset CB_LINEHEADER
	unset CB_CUSTOM_SETTING_SCRIPT
}


#########################################################################
# commonBuildGradle
#########################################################################
commonBuildGradle() {
	CB_PARAMETERS="$*"
	[ "$CB_OS" = "cygwin" ] && JAVA_HOME=

	GRADLE_EXEC=gradle
	if [ -x gradlew ]; then
		GRADLE_EXEC=./gradlew
	else
		if [ -z "$CB_GRADLE_HOME" ]; then
			! [ -d "$CB_CURRENT_PATH/gradle/bin" ] && $PN_FULL --silent --install gradle --default
			[ -d "$CB_CURRENT_PATH/gradle/bin" ] && CB_GRADLE_HOME="$CB_CURRENT_PATH/gradle"

			#cbInstalledGradleVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*gradle*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
			#if [ -z "$cbInstalledGradleVersion" ]; then
			#	$PN_FULL --silent --install gradle
			#    cbInstalledGradleVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*gradle*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
			#fi
			#[ -z "$cbInstalledGradleVersion" ] && echo "${CB_LINEHEADER}Can not find common-build gradle version, give up." && endWithError
			#CB_GRADLE_HOME="$CB_DEVTOOLS/$cbInstalledGradleVersion"

			if [ -z "$(echo $CB_GRADLE_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
				echo "${CB_LINEHEADER}CB_GRADLE_HOME is not set to a gradle version in devtools ($CB_DEVTOOLS): $CB_GRADLE_HOME."
				endWithError
			fi

			! [ "$CB_GRADLE_HOME" = "$GRADLE_HOME" ] && GRADLE_HOME="$CB_GRADLE_HOME" && export GRADLE_HOME
			[ "$(echo ${PATH#*$CB_GRADLE_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_GRADLE_HOME/bin:$PATH" && export PATH
			
			if ! [ -n "$(existBinary $GRADLE_EXEC)" ]; then
				echo "${CB_LINEHEADER}Could not find gradle version in path."
				endWithError
			fi
		fi
	fi

	[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo "${CB_LINEHEADER}Offline build."
	[ -r "$CB_WORKING_PATH/package.json" ] && prepareCommonBuildNode
	
    eval "$GRADLE_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuildMaven
#########################################################################
commonBuildMaven() {
	CB_PARAMETERS="$*"
	MAVEN_EXEC=mvn
	if [ -x mvnw ]; then
		MAVEN_EXEC=./mvnw
	else
		if [ -z "$CB_MAVEN_HOME" ]; then
			! [ -d "$CB_CURRENT_PATH/maven/bin" ] && $PN_FULL --silent --install maven --default
			[ -d "$CB_CURRENT_PATH/maven/bin" ] && CB_MAVEN_HOME="$CB_CURRENT_PATH/maven"

		    #cbInstalledMavenVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*maven*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
			#if [ -z "$cbInstalledMavenVersion" ]; then
			#	$PN_FULL --silent --install maven
			#	cbInstalledMavenVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*maven*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
			#fi
			#[ -z "$cbInstalledMavenVersion" ] && echo "${CB_LINEHEADER}Can not find common-build maven version, give up." && endWithError
			#CB_MAVEN_HOME="$CB_DEVTOOLS/$cbInstalledMavenVersion"

			if [ -z "$(echo $CB_MAVEN_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
				echo "${CB_LINEHEADER}CB_MAVEN_HOME is not set to a maven version in devtools ($CB_DEVTOOLS): $CB_MAVEN_HOME."
				endWithError
			fi

			! [ "$CB_MAVEN_HOME" = "$MAVEN_HOME" ] && MAVEN_HOME="$CB_MAVEN_HOME" && export MAVEN_HOME
			[ "$(echo ${PATH#*$CB_MAVEN_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_MAVEN_HOME/bin:$PATH" && export PATH
			
			if ! [ -n "$(existBinary $MAVEN_EXEC)" ]; then
				echo "${CB_LINEHEADER}Could not find maven version in path."
				endWithError
			fi
		fi
	fi

	#[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo ${CB_LINEHEADER}Offline build.
    eval "$MAVEN_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuildAnt
#########################################################################
commonBuildAnt() {
	CB_PARAMETERS="$*"
	ANT_EXEC=ant
	if [ -z "$CB_ANT_HOME" ]; then
		! [ -d "$CB_CURRENT_PATH/ant/bin" ] && $PN_FULL --silent --install ant --default
		[ -d "$CB_CURRENT_PATH/ant/bin" ] && CB_ANT_HOME="$CB_CURRENT_PATH/ant"

		#cbInstalledAntVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*ant*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
		#if [ -z "$cbInstalledAntVersion" ]; then
		#	$PN_FULL --silent --install ant
		#	cbInstalledAntVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*ant*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
		#fi
		#[ -z "$cbInstalledAntVersion" ] && echo "${CB_LINEHEADER}Can not find common-build ant version, give up." && endWithError
		#CB_ANT_HOME="$CB_DEVTOOLS/$cbInstalledAntVersion"

		if [ -z "$(echo $CB_ANT_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
			echo "${CB_LINEHEADER}CB_ANT_HOME is not set to a ant version in devtools ($CB_DEVTOOLS): $CB_ANT_HOME."
			endWithError
		fi

		! [ "$CB_ANT_HOME" = "$ANT_HOME" ] && ANT_HOME="$CB_ANT_HOME" && export ANT_HOME
		[ "$(echo ${PATH#*$CB_ANT_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_ANT_HOME/bin:$PATH" && export PATH
		
		if ! [ -n "$(existBinary $ANT_EXEC)" ]; then
			echo "${CB_LINEHEADER}Could not find ant version in path."
			endWithError
		fi
	fi

	#[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo ${CB_LINEHEADER}Offline build.
	eval "$ANT_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# prepareCommonBuildNode
#########################################################################
prepareCommonBuildNode() {
	CB_PARAMETERS="$*"
	NODE_EXEC=npm
	if [ -z "$CB_NODE_HOME" ]; then
		! [ -d "$CB_CURRENT_PATH/node" ] && $PN_FULL --silent --install node --default
		[ -d "$CB_CURRENT_PATH/node" ] && CB_NODE_HOME="$CB_CURRENT_PATH/node"

		#cbInstalledNodeVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*node*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
		#if [ -z "$cbInstalledNodeVersion" ]; then
		#	$PN_FULL --silent --install node
		#	cbInstalledNodeVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "*node*" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)
		#fi
		#[ -z "$cbInstalledNodeVersion" ] && echo "${CB_LINEHEADER}Can not find common-build node version, give up." && endWithError
		#CB_NODE_HOME="$CB_DEVTOOLS/$cbInstalledNodeVersion"

		if [ -z "$(echo $CB_NODE_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
			echo "${CB_LINEHEADER}CB_NODE_HOME is not set to a node version in devtools ($CB_DEVTOOLS): $CB_NODE_HOME."
			endWithError
		fi

		! [ "$CB_NODE_HOME" = "$NODE_HOME" ] && NODE_HOME="$CB_NODE_HOME" && export NODE_HOME
		[ "$(echo ${PATH#*$CB_NODE_HOME*})" = "$(echo $PATH)" ] && PATH="$CB_NODE_HOME:$PATH" && export PATH

		if ! [ -n "$(existBinary $NODE_EXEC)" ]; then
			echo "${CB_LINEHEADER}Could not find node version in path."
			endWithError
		fi
	fi
}


#########################################################################
# commonBuildNode
#########################################################################
commonBuildNode() {
	CB_PARAMETERS="$*"
	prepareCommonBuildNode

	#[ "$CB_OFFLINE" = "true" ] && CB_PARAMETERS="--offline $CB_PARAMETERS" && echo ${CB_LINEHEADER}Offline build.
	eval "$NODE_EXEC $CB_PARAMETERS"
	errorCode=$?
}


#########################################################################
# commonBuild
#########################################################################
commonBuild() {
	JAVAC_EXEC=javac
	cbJavaVersion=
	readVersion

	if [ -r "$CB_JAVA_VERSION_FILE" ]; then
		#current run java switch
		CB_JAVA_HOME=
		cbJavaVersion=$(awk '{print $1}' < "$CB_JAVA_VERSION_FILE" 2>/dev/null)
		rm -f "$CB_JAVA_VERSION_FILE" >/dev/null 2>&1
		[ -n "$cbJavaVersion" ] && echo "${CB_LINEHEADER}Set java version $cbJavaVersion (by command line --java $cbJavaVersion)"
	elif [ -r "$CB_PROJECT_JAVA_VERSION_FILE" ]; then
		# project specific java switch
		CB_JAVA_HOME=
		cbJavaVersion=$(awk '{print $1}' < "$CB_PROJECT_JAVA_VERSION_FILE" 2>/dev/null)
		[ -n "$cbJavaVersion" ] && echo "${CB_LINEHEADER}Set project java version $cbJavaVersion (from .java-version)"
	else
		# check CB_JAVA_HOME; otherwise set default java
		if [ -z "$CB_JAVA_HOME" ]; then
			! [ -d "$CB_CURRENT_PATH/java/bin" ] && $PN_FULL --silent --install java --default
			! [ -d "$CB_CURRENT_PATH/java/bin" ] && echo "${CB_LINEHEADER}Could not find default java installation." && endWithError
		fi

		CB_JAVA_HOME="$CB_CURRENT_PATH/java"
	fi

	if [ -z "$CB_JAVA_HOME" ]; then
		cbJavaVersionFilter="*"
		cbInstalledJavaVersion=

		versionInformation=""
		if [ -n "$cbJavaVersion" ]; then
			versionInformation=" $cbJavaVersion"
			cbJavaVersionFilter="$cbJavaVersion*"
			[ -z "${cbJavaVersion##*[!0-9]*}" ] && echo "${CB_LINEHEADER}Invalid java version paramter $cbJavaVersion (only major version can be referenced, e.g. 11, 12...)" && endWithError
		fi

		[ -z "$CB_DEVTOOLS_JAVA_PREFIX" ] && CB_DEVTOOLS_JAVA_PREFIX="*"
		cbInstalledJavaVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "$CB_DEVTOOLS_JAVA_PREFIX$cbJavaVersionFilter" -prune -exec ls -d {} \; 2>/dev/null | tail -1 2>/dev/null | xargs -l basename 2>/dev/null)

		if [ -z "$cbInstalledJavaVersion" ]; then
			if [ -n "$cbJavaVersion" ]; then
				$PN_FULL --silent --install java "$cbJavaVersion"
			else
				$PN_FULL --silent --install java
			fi

			cbInstalledJavaVersion=$(find "$CB_DEVTOOLS" -maxdepth 1 -type d -name "$CB_DEVTOOLS_JAVA_PREFIX$cbJavaVersionFilter" 2>/dev/null | head -1 2>/dev/null | xargs -l basename 2>/dev/null)
			[ -z "$cbInstalledJavaVersion" ] && echo "${CB_LINEHEADER}Can not find common-build java version${versionInformation}, give up." && endWithError
		fi

		CB_JAVA_HOME="$CB_DEVTOOLS/$cbInstalledJavaVersion"
		export CB_JAVA_HOME
	fi

	#if [ -z "$CB_JAVA_HOME" ]; then
	if [ -z "$(echo $CB_JAVA_HOME | grep $CB_DEVTOOLS 2>/dev/null)" ]; then
		echo "${CB_LINEHEADER}CB_JAVA_HOME is not set to a java version in devtools ($CB_DEVTOOLS): $CB_JAVA_HOME."
		endWithError
	fi

	if ! [ -x "$CB_JAVA_HOME/bin/$JAVAC_EXEC" ]; then
		echo "${CB_LINEHEADER}CB_JAVA_HOME entry could not be found: $CB_JAVA_HOME."
		endWithError
	fi

	JAVA_HOME=$CB_JAVA_HOME
	export JAVA_HOME
	[ "$(echo ${PATH#*$CB_JAVA_HOME/bin*})" = "$(echo $PATH)" ] && PATH="$CB_JAVA_HOME/bin:$PATH" && export PATH
	#&& echo ${CB_LINEHEADER}Set $CB_JAVA_HOME to path!

	if ! [ -n "$(existBinary $JAVAC_EXEC)" ]; then
		echo "${CB_LINEHEADER}Could not find java version in path."
		endWithError
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT build-start $*" 2>/dev/null

	# decide which build tool to use
	if [ -r "$CB_WORKING_PATH/build.gradle" ]; then
		commonBuildGradle "$@"
	elif [ -r "$CB_WORKING_PATH/pom.xml" ]; then
		commonBuildMaven "$@"
	elif [ -r "$CB_WORKING_PATH/build.xml" ]; then
		commonBuildAnt "$@"
	elif [ -r "$CB_WORKING_PATH/package.json" ]; then
		commonBuildNode "$@"
	else
		# if there is no known configuration file just end	
		echo "$CB_LINE"
		echo "${CB_LINEHEADER}No configuration file found for common build known build tools."
		echo "${CB_LINEHEADER}Change into a project or create a new project, see cb --help."
		echo "$CB_LINE"
		endWithError
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT build-end $*" 2>/dev/null
	exit $errorCode
}


#########################################################################
# checkHttpRequestCLI
#########################################################################
checkHttpRequestCLI() {
	[ -n "$(existBinary curl)" ] && echo $(existBinary curl) && return
	[ -n "$(existBinary wget)" ] && echo $(existBinary wget) && return
	echo ""
}


#########################################################################
# download files
#########################################################################
downloadFiles() {
	errorCode=1
	if [ -z "$2" ]; then
		! [ -n "$(existBinary wget)" ] && echo "${CB_LINEHEADER}Can not download wildcard by curl, please install wget." | tee -a "$CB_LOGFILE" && return
	fi

	! [ -n "$(existBinary unzip)" ] && echo "${CB_LINEHEADER}Missing package unzip, please install it before you continue!" | tee -a "$CB_LOGFILE" && echo "$CB_LINE" && endWithError

    if [ -z "${HTTP_REQUEST_CLI##*curl*}" ]; then
		! [ -n "$CB_CURL_CONTINUE" ] && CB_CURL_CONTINUE="-C -"
		! [ -n "$CB_CURL_REDIRECT" ] && CB_CURL_REDIRECT="-L"
		! [ -n "$CB_CURL_SECURITY_CREDENTIALS" ] && CB_CURL_SECURITY_CREDENTIALS="--insecure"
		! [ -n "$CB_CURL_PROGRESSBAR" ] && CB_CURL_PROGRESSBAR="-#"		
		[ -n "$CB_PACKAGE_COOKIE" ] && CB_CURL_COOKIE="-c $CB_PACKAGE_COOKIE"
		[ -n "$CB_PACKAGE_USERAGENT" ] && CB_CURL_USERAGENT="-H User-Agent:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36\""
		[ -n "$CB_PACKAGE_SILENT_LOG" ] && CB_CURL_LOG="-Ss"
		#[ -n "$CB_VERBOSE" = "true" ] && CB_CURL_TRACE="--trace-ascii"
		#CB_CURL_USER_CREDENTIALS="-u <user:password>
		[ -z "$CB_CURL_USER_CREDENTIALS" ] && CB_CURL_USER_CREDENTIALS=" "
		#echo "$HTTP_REQUEST_CLI $CB_CURL_CONTINUE $CB_CURL_REDIRECT $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_PROGRESSBAR $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 $1"
		#2>>$CB_LOGFILE
		CB_LAST_CMD="$HTTP_REQUEST_CLI $CB_CURL_PROGRESSBAR $CB_CURL_CONTINUE $CB_CURL_REDIRECT $CB_CURL_COOKIE $CB_CURL_USERAGENT $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_TRACE $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 \"$1\""
		[ "$CB_VERBOSE" = "true" ] && echo "${CB_LINEHEADER}Download call: $CB_LAST_CMD"
		eval $HTTP_REQUEST_CLI "$CB_CURL_PROGRESSBAR" "$CB_CURL_CONTINUE" "$CB_CURL_REDIRECT" "$CB_CURL_COOKIE" "$CB_CURL_USERAGENT" "$CB_CURL_SECURITY_CREDENTIALS" "$CB_CURL_TRACE" "$CB_CURL_USER_CREDENTIALS" "$CB_CURL_LOG" -o "$2" "$1"
		#&> /dev/stdout | tee -a "$CB_LOGFILE"
		errorCode=$?		

		if [ $errorCode -eq 33 ]; then
			CB_LAST_CMD="$HTTP_REQUEST_CLI $CB_CURL_PROGRESSBAR $CB_CURL_REDIRECT $CB_CURL_COOKIE $CB_CURL_USERAGENT $CB_CURL_SECURITY_CREDENTIALS $CB_CURL_TRACE $CB_CURL_USER_CREDENTIALS $CB_CURL_LOG -o $2 \"$1\""
			[ "$CB_VERBOSE" = "true" ] && echo "${CB_LINEHEADER}Download call: $CB_LAST_CMD"
			eval $HTTP_REQUEST_CLI "$CB_CURL_PROGRESSBAR" "$CB_CURL_REDIRECT" "$CB_CURL_COOKIE" "$CB_CURL_USERAGENT" "$CB_CURL_SECURITY_CREDENTIALS" "$CB_CURL_TRACE" "$CB_CURL_USER_CREDENTIALS" "$CB_CURL_LOG" -o "$2" "$1"
			#&> /dev/stdout | tee -a "$CB_LOGFILE"
			errorCode=$?
		fi
    else
		! [ -n "$CB_WGET_PARAM" ] && CB_WGET_PARAM="-c"
		! [ -n "$CB_WGET_SECURITY_CREDENTIALS" ] && CB_WGET_SECURITY_CREDENTIALS="--trust-server-names --no-check-certificate"
		! [ -n "$CB_WGET_PROGRESSBAR" ] && CB_WGET_PROGRESSBAR="--show-progress"
		! [ -n "$CB_WGET_USER_CREDENTIALS" ] && CB_WGET_USER_CREDENTIALS=" "
		! [ -n "$CB_WGET_LOG" ] && CB_WGET_LOG="-a $CB_LOGFILE"

		if [ -z $2 ]; then
			[ -z "$CB_WGET_FILTER" ] && CB_WGET_FILTER="--exclude-directories=_deprecated -R \"index.*\""
			[ -z "$CB_WGET_RECURSIVE_PARAM" ] && CB_WGET_RECURSIVE_PARAM="-r -np -nH --timestamping"
			echo "$HTTP_REQUEST_CLI $1 $CB_WGET_RECURSIVE_PARAM $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_FILTER $CB_WGET_LOG"
			CB_LAST_CMD="$HTTP_REQUEST_CLI $1 $CB_WGET_RECURSIVE_PARAM $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_FILTER $CB_WGET_LOG"
			[ "$CB_VERBOSE" = "true" ] && echo "${CB_LINEHEADER}Download call: $CB_LAST_CMD"
			eval $HTTP_REQUEST_CLI "$1" "$CB_WGET_RECURSIVE_PARAM" "$CB_WGET_PARAM" "$CB_WGET_SECURITY_CREDENTIALS" "$CB_WGET_PROGRESSBAR" "$CB_WGET_USER_CREDENTIALS" "$CB_WGET_FILTER" "$CB_WGET_LOG"
		else
			CB_LAST_CMD="$HTTP_REQUEST_CLI -O $2 $1 $CB_WGET_PARAM $CB_WGET_SECURITY_CREDENTIALS $CB_WGET_PROGRESSBAR $CB_WGET_USER_CREDENTIALS $CB_WGET_LOG"
			[ "$CB_VERBOSE" = "true" ] && echo "${CB_LINEHEADER}Download call: $CB_LAST_CMD"
			eval $HTTP_REQUEST_CLI -O "$2" "$1" "$CB_WGET_PARAM" "$CB_WGET_SECURITY_CREDENTIALS" "$CB_WGET_PROGRESSBAR" "$CB_WGET_USER_CREDENTIALS" "$CB_WGET_LOG"
        fi

		errorCode=$?
    fi
	
	unset CB_CURL_LOG
	unset CB_CURL_USERAGENT
	unset CB_PACKAGE_COOKIE
	unset CB_CURL_COOKIE
	unset CB_PACKAGE_SILENT_LOG
	unset CB_PACKAGE_USERAGENT
}


#########################################################################
# downloadPackage
#########################################################################
downloadPackage() {
	if [ -z $1 ]; then
		echo "${CB_LINEHEADER}Error occured in download: Missing package name." | tee -a "$CB_LOGFILE"
		errorCode=1
		return
	fi

	errorCode=
	CB_PACKAGE_NAME=$1
	CB_PACKAGE_VERSION=
	CB_PACKAGE_BASE_URL=
	CB_PACKAGE_DOWNLOAD_NAME=
	CB_PACKAGE_VERSION_NAME=
	CB_PACKAGE_DOWNLOAD_URL=
	shift

	if [ -x "$CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh" ]; then
		# we expecte:
		# 1) the CB_PACKAGE_VERSION contains the version which will be installed (optional)
		# 2) the CB_PACKAGE_DOWNLOAD_NAME contains the package name which will be downloaded; at the end of the download we have this file (mandatory)
		# 3) the CB_PACKAGE_BASE_URL contains the base package url to download; if this is defined then the CB_PACKAGE_DOWNLOAD_URL can be empty
		# 4) the CB_PACKAGE_DOWNLOAD_URL contains the package url to download; in case we have the CB_PACKAGE_BASE_URL then this is not necessary

		# call package specific settings
		#echo . $CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh $1 $2
		eval ". $CB_SCRIPT_PATH/packages/$CB_PACKAGE_NAME/$CB_PACKAGE_NAME.sh $1 $2"

		# supported environment variables from cb: CB_LINE, CB_LOGFILE, CB_DEVTOOLS, CB_DEV_REPOSITORY, CB_WGET_CALL
		if [ -z "$CB_PACKAGE_DOWNLOAD_URL" ]; then
			if [ -z "$CB_PACKAGE_BASE_URL" ]; then
				echo "${CB_LINEHEADER}Could not found expected environment variable \$CB_PACKAGE_BASE_URL" | tee -a "$CB_LOGFILE"
				errorCode=1
				return
			else
				CB_PACKAGE_DOWNLOAD_URL=$CB_PACKAGE_BASE_URL/$CB_PACKAGE_DOWNLOAD_NAME
			fi
		fi

		if [ -z "$CB_PACKAGE_DOWNLOAD_NAME" ]; then
			echo "${CB_LINEHEADER}Could not found expected environment variable \$CB_PACKAGE_DOWNLOAD_NAME" | tee -a "$CB_LOGFILE"
			errorCode=1
			return
		else
			[ -z "$CB_PACKAGE_VERSION_NAME" ] && CB_PACKAGE_VERSION_NAME=$CB_PACKAGE_DOWNLOAD_NAME

			# overwrite
			[ "$CB_INSTALL_OVERWRITE_DIST" = "true" ] && rm -rf $CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME >/dev/null 2>&1

			# if we already have it we ignore
			if ! [ -r "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" ]; then
				echo "${CB_LINEHEADER}Download $CB_PACKAGE_NAME version $CB_PACKAGE_VERSION" | tee -a "$CB_LOGFILE"
				if cd "$CB_DEV_REPOSITORY"; then
					downloadFiles "$CB_PACKAGE_DOWNLOAD_URL" "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME"
					cd "$CB_WORKING_PATH"
					[ $errorCode -ne 0 ] && echo "${CB_LINEHEADER}Error occured by download, give up." | tee -a "$CB_LOGFILE"
					[ $errorCode -ne 0 ] && echo "${CB_LINEHEADER}Call: $CB_LAST_CMD" | tee -a "$CB_LOGFILE"
				fi

				# in case it is zero size we delete it
				if [ -r "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" ]; then
					if [ $(getFileSize $CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME) -lt 1000 ]; then
						echo "${CB_LINEHEADER}Invalid package $CB_PACKAGE_NAME $CB_PACKAGE_VERSION, give up." | tee -a "$CB_LOGFILE"
						rm -rf "$CB_DEV_REPOSITORY/$CB_PACKAGE_DOWNLOAD_NAME" >/dev/null 2>&1
						errorCode=1
					fi
				fi
			fi
		fi
	else
		echo "${CB_LINEHEADER}Package $CB_PACKAGE_NAME is currently not supported." | tee -a "$CB_LOGFILE"
		errorCode=1
	fi
}


#########################################################################
# installCb
#########################################################################
installCb() {
	DATEFORMAT="date '+%d.%m.%Y %H:%M:%S'"
	USER_FRIENDLY_FULLTIMESTAMP=$(eval "$DATEFORMAT")
	FULLTIMESTAMP=$(date '+%Y%m%d-%H%M%S')
	errorCode=

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-start $*" 2>/dev/null

	machineName=$(hostname 2>/dev/null)
	! [ -n "$machineName" ] && machineName="$HOSTNAME"
	
	if [ "$CB_INSTALL_SILENT" = "false" ]; then
		echo "$CB_LINE"
		echo "${CB_LINEHEADER}Start common-build installation on $machineName, $USER_FRIENDLY_FULLTIMESTAMP"
		echo "${CB_LINEHEADER}Use $CB_DEVTOOLS path as devtools folder"
		echo "$CB_LINE"
	fi

	HTTP_REQUEST_CLI=$(checkHttpRequestCLI)
	CB_BIN=$CB_HOME/bin
	CB_LOGS=$CB_HOME/logs
	CB_DEV_REPOSITORY=$CB_DEVTOOLS/.repository
	CB_LOGFILE=$CB_LOGS/$FULLTIMESTAMP-$CB_USER.log
	CB_PACKAGE_NO_DEFAULT=false
	CB_PACKAGE_ALREADY_EXIST=false
	
	! [ -d "$CB_DEVTOOLS" ] && mkdir -p "$CB_DEVTOOLS" 2>/dev/null
	! [ -d "$CB_HOME" ] && mkdir -p "$CB_HOME" 2>/dev/null
	! [ -d "$CB_BIN" ] && mkdir -p "$CB_BIN" 2>/dev/null
	! [ -d "$CB_LOGS" ] && mkdir -p "$CB_LOGS" 2>/dev/null
	! [ -d "$CB_DEV_REPOSITORY" ] && mkdir -p "$CB_DEV_REPOSITORY" 2>/dev/null

	echo "$CB_LINE" >> "$CB_LOGFILE"
	echo "Started common-build installation on $machineName, $USER_FRIENDLY_FULLTIMESTAMP" >> "$CB_LOGFILE"
	echo "common-build: $CB_HOME" >> "$CB_LOGFILE"
	echo "devtools: $CB_DEVTOOLS" >> "$CB_LOGFILE"
	# echo wget: $CB_WGET_VERSION, gradle: $CB_GRADLE_VERSION, java: $CB_JAVA_VERSION>> "$CB_LOGFILE"
	echo "$CB_LINE" >> "$CB_LOGFILE"

	CB_PROCESSOR_ARCHITECTURE_NUMBER=$(getconf LONG_BIT)
	[ -z "$CB_PROCESSOR_ARCHITECTURE_NUMBER" ] && CB_PROCESSOR_ARCHITECTURE_NUMBER=64

	[ "$1" = "--default" ] && shift && CB_SET_DEFAULT=true
	[ "$1" = "-d" ] && shift && CB_SET_DEFAULT=true
	CB_INSTALL_PKG="$1"
	[ -z "$CB_INSTALL_PKG" ] && echo "${CB_LINEHEADER}No package found to install." && echo "$CB_LINE" && endWithError
	shift

	[ "$1" = "--default" ] && shift && CB_SET_DEFAULT=true
	[ "$1" = "-d" ] && shift && CB_SET_DEFAULT=true
	[ -n "$1" ] && CB_INSTALL_VERSION=$1 && shift
	[ "$1" = "--default" ] && shift && CB_SET_DEFAULT=true
	[ "$1" = "-d" ] && shift && CB_SET_DEFAULT=true
	[ -n "$1" ] && CB_INSTALL_VERSION_PARAM=$1 && shift	
	[ "$1" = "--default" ] && shift && CB_SET_DEFAULT=true
	[ "$1" = "-d" ] && shift && CB_SET_DEFAULT=true

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT download-package-start $CB_INSTALL_PKG $CB_INSTALL_VERSION $CB_INSTALL_VERSION_PARAM" 2>/dev/null

	CB_PACKAGE_PERMISSION_CMD=
	if [ "$CB_INSTALL_PKG" = "cb" ]; then
		CB_PKG_FILTER=cb
		CB_PKG_FILTER_WILDCARD=
		CB_PACKAGE_DEST_VERSION_NAME=
	elif [ "$CB_INSTALL_PKG" = "pkg" ]; then
		CB_PKG_FILTER="*.zip"
		CB_PKG_FILTER_WILDCARD="true"
	else
		CB_PKG_FILTER=
		CB_PKG_FILTER_WILDCARD="false"
	fi

	if [ "$CB_PKG_FILTER_WILDCARD" = "true" ]; then
		if [ -n "$CB_PACKAGE_URL" ]; then
			CB_WGET_USER_CREDENTIALS=
			if [ -z "$CB_PACKAGE_USER" ]; then
				echo "Please enter user credentials, e.g. $CB_USER:"
				read -r CB_PACKAGE_USER
				[ -z "$CB_PACKAGE_USER" ] && CB_PACKAGE_USER=$CB_USER
			fi
			[ "$CB_PACKAGE_PASSWORD" = "ask" ] && CB_WGET_USER_CREDENTIALS="--ask-password --user $CB_PACKAGE_USER"

			echo "$CB_LINE" >> "$CB_LOGFILE"
			echo "${CB_LINEHEADER}Install packages from $CB_PACKAGE_URL && echo ${CB_LINEHEADER}Install packages from $CB_PACKAGE_URL" >> "$CB_LOGFILE"
			if cd "$CB_DEV_REPOSITORY"; then
				downloadFiles "$CB_PACKAGE_URL"
				cd "$CB_WORKING_PATH"
			fi

			if [ $errorCode -eq 0 ]; then
				echo "$CB_LINE" | tee -a "$CB_LOGFILE"
				echo "ERROR: Invalid credentials, give up." | tee -a "$CB_LOGFILE"
				echo "$CB_LINE" | tee -a "$CB_LOGFILE"
				endWithError
			fi

			echo "$CB_LINE" >> "$CB_LOGFILE"
		fi
	else
		if [ "$CB_OFFLINE" = "false" ]; then
			# read ones a day the newest tool version
			DATETIMESTAMP=$(date '+%Y%m%d')
			lastCheck="" && CB_TOOL_VERSION_DEFAULT_CHECK="${CB_TOOL_VERSION_DEFAULT}.lastCheck"
			while :; do
				[ -r "$CB_TOOL_VERSION_DEFAULT_CHECK" ] && lastCheck=$(cat $CB_TOOL_VERSION_DEFAULT_CHECK)
				if [ -n "$lastCheck" ] && [ "$lastCheck" = "$DATETIMESTAMP" ]; then
					break
				else
					TOOL_VERSION_DEFAULT_TMP=$(mktemp /tmp/cb-tool-version-default.XXXXXXXXX)
					echo "${CB_LINEHEADER}Updated ${CB_TOOL_VERSION_DEFAULT##*/}."
					downloadFiles "$CB_TOOL_VERSION_DEFAULT_URL" "$TOOL_VERSION_DEFAULT_TMP"
					[ -r "$TOOL_VERSION_DEFAULT_TMP" ] && mv $TOOL_VERSION_DEFAULT_TMP $CB_TOOL_VERSION_DEFAULT >/dev/null 2>&1 || break
					echo $DATETIMESTAMP> $CB_TOOL_VERSION_DEFAULT_CHECK
				fi
			done
		fi

		if [ -z "$CB_INSTALL_VERSION" ] && [ -r "$CB_TOOL_VERSION_DEFAULT" ]; then
			CB_TOOL_VERSION_DEFAULT_TMPFILE=$(mktemp /tmp/cb-tool-version-default.XXXXXXXXX)
			cat $CB_TOOL_VERSION_DEFAULT 2>/dev/null | grep -v "#" | grep "=" > $CB_TOOL_VERSION_DEFAULT_TMPFILE 2>/dev/null
			while IFS= read -r line; do
				key="${line%=*}" && key="$(echo $key 2>/dev/null| sed 's/ //g' 2>/dev/null)"								
				if [ "$key" = "$CB_INSTALL_PKG" ]; then
					# linux only: CB_INSTALL_VERSION=$(echo "${line#*=}" | sed 's/^[ \t]*//;s/[ \t]*$//')					
					# linux and osx:
					CB_INSTALL_VERSION=$(echo "${line#*=}" | sed 's/^[ '$'\t'']*//;s/[ '$'\t'']*$//')
					CB_INSTALL_VERSION_PARAM="${CB_INSTALL_VERSION#* }"
					CB_INSTALL_VERSION="${CB_INSTALL_VERSION% *}" 
					break
				fi
			done <  $CB_TOOL_VERSION_DEFAULT_TMPFILE
			rm -f $CB_TOOL_VERSION_DEFAULT_TMPFILE >/dev/null 2>&1
		fi

		if [ "$CB_PKG_FILTER" = "cb" ]; then
			if [ "$CB_INSTALL_SILENT" = "false" ] ; then
				[ -z "$CB_INSTALL_VERSION" ] && echo "${CB_LINEHEADER}Install newest cb version..." || echo "${CB_LINEHEADER}Install cb version $CB_INSTALL_VERSION..."
			fi

			[ "$CB_INSTALL_OVERWRITE_DIST" = "true" ] && eval "${CB_SCRIPT_PATH}/cb-install --force --silent $CB_INSTALL_VERSION"
			[ "$CB_INSTALL_OVERWRITE_DIST" = "false" ] && eval "${CB_SCRIPT_PATH}/cb-install --silent $CB_INSTALL_VERSION"

			if [ -d "$CB_HOME_PREVIOUS/current" ]; then
				[ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Copy symbolic link..."
				( cd $CB_HOME_PREVIOUS/current ; tar cf - . ) | ( cd $CB_HOME/current ; tar xf - )
			fi
		else
			downloadPackage "$CB_INSTALL_PKG" "$CB_INSTALL_VERSION" "$CB_INSTALL_VERSION_PARAM"
			[ -n "$CB_PACKAGE_DOWNLOAD_NAME" ] && CB_PKG_FILTER=$CB_PACKAGE_DOWNLOAD_NAME
		fi
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT download-package-end $CB_INSTALL_PKG $CB_INSTALL_VERSION $CB_INSTALL_VERSION_PARAM" 2>/dev/null

	if [ "$CB_PACKAGE_ALREADY_EXIST" = "true" ]; then
		[ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Package ${CB_INSTALL_PKG} already exists."
	else
		if [ -z "$errorCode" ] || [ "$errorCode" -eq 0 ]; then
			#CB_TAR_PARAM="-k"
			CB_TAR_PARAM=""
			CB_UNZIP_PARAM="-n"
			CB_XZ_PARAM="-k"
			[ "$CB_INSTALL_OVERWRITE_DIST" = "true" ] && CB_UNZIP_PARAM="-o" && CB_TAR_PARAM="--overwrite" && CB_XZ_PARAM="-f"
			[ -n "$CB_PACKAGE_DEST_VERSION_NAME" ] && mkdir -p "$CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME" >/dev/null 2>&1 && CB_UNZIP_PARAM="$CB_UNZIP_PARAM -d $CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME" && CB_TAR_PARAM="-C $CB_DEVTOOLS/$CB_PACKAGE_DEST_VERSION_NAME"

			# extract
			# custom setting script
			[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT extract-package-start $CB_INSTALL_PKG $CB_INSTALL_VERSION" 2>/dev/null

			if [ -n "$CB_PKG_FILTER" ]; then
				if [ -n "$CB_PKG_FILTER_WILDCARD" ]; then
					#[ "$CB_PKG_FILTER_WILDCARD" = "true" ] &&
					[ "$CB_INSTALL_SILENT" = "false" ] && echo "$CB_LINE" >> "$CB_LOGFILE"
					[ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Extract $CB_PKG_FILTER in $CB_DEVTOOLS..." | tee -a "$CB_LOGFILE"
					for i in $(ls -1 "$CB_DEV_REPOSITORY/$CB_PKG_FILTER" 2>/dev/null)
					do
						[ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}Extract package $i" >> "$CB_LOGFILE"

						if [ -z "${i%%*.zip}" ]; then
						
							if ! [ -n "$(existBinary unzip)" ]; then
								echo "${CB_LINEHEADER}Could not find unzip, please install unzip."
								CMD=""
							else
								[ -z "${i%%*.zip}" ] && CMD="unzip $CB_UNZIP_PARAM $i" && TOPDIR_CMD="unzip -Z -1 $i | head -n1 | sed 's/\/\$//g'"
							fi
						elif [ -z "${i%%*.exe}" ]; then
							[ "$CB_OS" = "cygwin" ] && eval "cmd /c $(cygpath --windows $i | sed 's/\\/\\\\/g')" >> "$CB_LOGFILE"
						elif [ -z "${i%%*.sh}" ]; then
							eval "$i" >> "$CB_LOGFILE"
						else
							[ -z "${i%%*.tar}" ] && CMD="tar $CB_TAR_PARAM -xf $i 2>&1" && TOPDIR_CMD="tar -tvf $i | head -n1 | awk '{print \$6}' | sed 's/\/\$//g'"
							[ -z "${i%%*.tar.gz}" ] && CMD="tar $CB_TAR_PARAM -zxf $i 2>&1" && TOPDIR_CMD="tar -ztvf $i | head -n1 | awk '{print \$6}' | sed 's/\/\$//g'"
							[ -z "${i%%*.tgz}" ] && CMD="tar $CB_TAR_PARAM -zxf $i 2>&1" && TOPDIR_CMD="tar -ztvf $i | head -n1 | awk '{print \$6}' | sed 's/\/\$//g'"
							[ -z "${i%%*.xz}" ] && CMD="xz $CB_XZ_PARAM --decompress $i 2>&1" && TOPDIR_CMD="tar -Jtvf $i | head -n1 | awk '{print \$6}' | sed 's/\/\$//g'"
						fi

						if [ -n "$CMD" ]; then
							CB_INSTALL_ERRORFILE=$CB_LOGS/$FULLTIMESTAMP-$CB_USER-error.log

							if [ -z "$CB_PACKAGE_DEST_VERSION_NAME" ]; then
								topDirectory=$(eval "cd $CB_DEVTOOLS && $TOPDIR_CMD" 2>"$CB_INSTALL_ERRORFILE") && topDirectory="${topDirectory%%/*}"
								if [ -z "$topDirectory" ]; then
									echo "${CB_LINEHEADER}Could not extract package $i:"
									cat "$CB_INSTALL_ERRORFILE"
								else
									CB_PACKAGE_DIRECTORY_NAME="$topDirectory"
								fi
							else
								CB_PACKAGE_DIRECTORY_NAME=$CB_PACKAGE_DEST_VERSION_NAME
							fi

							if ! eval "cd $CB_DEVTOOLS && $CMD" 2>"$CB_INSTALL_ERRORFILE" >> "$CB_LOGFILE"; then
								echo "${CB_LINEHEADER}Could not extract package $i:"
								cat "$CB_INSTALL_ERRORFILE"
							else
								[ "$CB_INSTALL_SILENT" = "false" ] && [ -d "$CB_PACKAGE_DIRECTORY_NAME" ] && echo "${CB_LINEHEADER}Directory $CB_PACKAGE_DIRECTORY_NAME will be updated."
								
								if [ -n "$CB_PACKAGE_PERMISSION_CMD" ]; then
									eval "cd $CB_DEVTOOLS/$CB_PACKAGE_DIRECTORY_NAME && $CB_PACKAGE_PERMISSION_CMD" >> "$CB_LOGFILE"
								fi
							fi
							rm -f "$CB_INSTALL_ERRORFILE" >/dev/null 2>&1
						fi
					done
					[ "$CB_INSTALL_SILENT" = "false" ] && echo "$CB_LINE" >> "$CB_LOGFILE"

					CB_INSTALLED_VERSION=$CB_INSTALL_VERSION
					[ -n "$CB_PACKAGE_VERSION" ] && CB_INSTALLED_VERSION=$CB_PACKAGE_VERSION
					installedMajorNumber="${CB_INSTALLED_VERSION%%.*}"
					CB_INSTALLED_PKG_PREFIX="${CB_INSTALL_PKG%%-*}"
					# [ "$CB_INSTALLED_PKG_PREFIX" = "java" ] && CB_INSTALL_PKG=$CB_INSTALLED_PKG_PREFIX
					# [ "$CB_INSTALL_PKG" = "java" ] && CB_INSTALL_PKG=$CB_INSTALL_PKG$installedMajorNumber
					CB_ENTRY_FOUND=false
					CB_UPDATED=false

					if [ "$CB_PACKAGE_NO_DEFAULT" = "false" ]; then
						CB_TOOL_VERSION_INSTALLED_TMPFILE=$(mktemp /tmp/cb-tool-version-default.XXXXXXXXX)
						CB_TOOL_VERSION_INSTALLED_TMPFILE2=$(mktemp /tmp/cb-tool-version-default.XXXXXXXXX)
						cat $CB_TOOL_VERSION_INSTALLED 2>/dev/null | grep -v "#" | grep "=" > $CB_TOOL_VERSION_INSTALLED_TMPFILE 2>/dev/null
						while IFS= read -r line; do
							key="${line%=*}" && key="$(echo $key 2>/dev/null| sed 's/ //g' 2>/dev/null)"
							value="${line#*=}" && value="$(echo $value 2>/dev/null| sed 's/ //g' 2>/dev/null)"

							if [ "$key" = "$CB_INSTALL_PKG" ]; then
								CB_ENTRY_FOUND=true
								if [ "$CB_SET_DEFAULT" = "true" ]; then
									#echo "add: $key = $CB_INSTALLED_VERSION"
									echo "$key = $CB_INSTALLED_VERSION">> $CB_TOOL_VERSION_INSTALLED_TMPFILE2
									CB_UPDATED=true
								fi
							else
								#echo "keep: $key = $value"
								echo "$key = $value">> $CB_TOOL_VERSION_INSTALLED_TMPFILE2
							fi
						done <  $CB_TOOL_VERSION_INSTALLED_TMPFILE
						rm -f $CB_TOOL_VERSION_INSTALLED_TMPFILE >/dev/null 2>&1

						[ "$CB_UPDATED" = "false" ] && [ "$CB_ENTRY_FOUND" = "false" ] && CB_SET_DEFAULT=true && echo "$CB_INSTALL_PKG = $CB_INSTALLED_VERSION" >> $CB_TOOL_VERSION_INSTALLED_TMPFILE2
						[ "$CB_INSTALL_SILENT" = "false" ] && [ "$CB_SET_DEFAULT" = "true" ] && echo "${CB_LINEHEADER}Set default for package $CB_INSTALL_PKG to version $CB_INSTALLED_VERSION"
						if [ "$CB_SET_DEFAULT" = "true" ]; then
							mv $CB_TOOL_VERSION_INSTALLED_TMPFILE2 $CB_TOOL_VERSION_INSTALLED >/dev/null 2>&1
							rm -f "$CB_CURRENT_PATH/$CB_INSTALL_PKG" >/dev/null 2>&1
							if [ -d "$CB_DEVTOOLS/$CB_PACKAGE_DIRECTORY_NAME" ]; then
								ln -s $CB_DEVTOOLS/$CB_PACKAGE_DIRECTORY_NAME $CB_CURRENT_PATH/$CB_INSTALL_PKG >/dev/null 2>&1
							else
								echo "${CB_LINEHEADER}Could not set default for $CB_INSTALL_PKG."
							fi
						fi
					fi
				fi
			else
				[ "$CB_INSTALL_SILENT" = "false" ] && echo "${CB_LINEHEADER}No package found $CB_PACKAGE_VERSION_NAME ($CB_PKG_FILTER)"
			fi
		fi
	fi

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT extract-package-end $CB_INSTALL_PKG $CB_INSTALL_VERSION" 2>/dev/null

	# custom setting script
	[ -n "$CB_CUSTOM_SETTING_SCRIPT" ] && eval ". $CB_CUSTOM_SETTING_SCRIPT install-end $*" 2>/dev/null

	[ "$CB_INSTALL_SILENT" = "false" ] && echo "$CB_LINE"
}


#########################################################################
# main
#########################################################################
CB_PARAMETERS=""
executeCustomSettings "$CB_PARAMETERS"
checkInternetConnection
CB_EXECUTE_BUILD=true
CB_VERBOSE=false

while [ $# -gt 0 ]
do
    case "$1" in
		--verbose) 	CB_VERBOSE=true;;
		--silent) 	CB_INSTALL_USER_COMMIT=false; CB_INSTALL_SILENT=true;;
		--force)	CB_INSTALL_OVERWRITE_DIST="true";;
		--default)	CB_SET_DEFAULT=true;;
		--offline)	CB_OFFLINE=true;;
		-h)			readVersion; printUsage; exit 0;;
		--help)		readVersion; printUsage; exit 0;;
		-v) 		readVersion; printVersion; exit 0;;
		--version) 	readVersion; printVersion; exit 0;;
		-new)		shift; projectWizard "$@"; exit 0;;
		--new)		shift; projectWizard "$@"; exit 0;;
		-exp)		shift; exploreProject; exit 0;;
		--explore)	shift; exploreProject; exit 0;;
		--packages)	shift; printPackages "$@"; exit 0;;
		--setenv)	CB_EXECUTE_BUILD=false; setCBEnv "$@";;
		--install)	shift; installCb "$@"; exit 0;;
		--java)		shift && echo $1 > $CB_JAVA_VERSION_FILE;;
		*)			CB_PARAMETERS="$CB_PARAMETERS \"$1\"";;
    esac
    shift
done

if [ -n "$CB_EXECUTE_BUILD" ] && [ "$CB_EXECUTE_BUILD" = "true" ]; then
	commonBuild "$CB_PARAMETERS"
fi


#########################################################################
#  EOF
#########################################################################
