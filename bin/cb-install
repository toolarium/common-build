#!/bin/sh

#########################################################################
#
# cb-install
#
# Copyright by toolarium, all rights reserved.
# MIT License: https://mit-license.org
#
#########################################################################


# define defaults
[ -z "$CB_DEVTOOLS_NAME" ] && CB_DEVTOOLS_NAME=devtools
[ -z "$CB_DEVTOOLS" ] && CB_DEVTOOLS="$HOME/$CB_DEVTOOLS_NAME"
#[ -z "`echo $OSTYPE | sed 's/cygwin.*//'`" ] && CLASSSEP=";" || CLASSSEP=":"

# define parameters
CB_LINE="----------------------------------------------------------------------------------------"
CB_LINEHEADER=".: "
PN=$(basename "$0")
#REL_PROG_PATH="${0%/*}"
#ABS_PROG_PATH=$(cd -- "`dirname $0`" && pwd)
#PN_BASE="${PN%*.sh}"

CB_FORCE_INSALL=false
CB_INSTALL_ONLY_STABLE=true
CB_INSTALLER_SILENT=false
CB_INSTALLER_VERSION=0.6.1
CB_RELEASE_URL=https://api.github.com/repos/toolarium/common-build/releases
FULLTIMESTAMP="date '+%Y%d%m%H%M%S'"
USER_FRIENDLY_FULLTIMESTAMP="date '+%d.%m.%Y %H:%M:%S'"
cbErrorTemp=$(mktemp /tmp/toolarium-common-build_error.XXXXXXXXX)

CB_OS="$(uname | tr '[:upper:]' '[:lower:]')"
CB_OS=$(echo "$CB_OS" | awk '{print substr($0, 0, 7)}')
case $CB_OS in
	'linux') CB_OS="linux";;
	'freebsd') CB_OS="freebsd";;
	'windows') CB_OS="windows";;
	'mac') CB_OS="mac";;
	'darwin') CB_OS="mac";;
	'sunos') CB_OS="solaris";;
	'cygwin') CB_OS="cygwin";;
	'cygwin_') CB_OS="cygwin";;
	'aix') CB_OS="aix";;
	*) ;;
esac


#########################################################################
# Usage
#########################################################################
Usage() {
	echo "$PN - toolarium common build installer v$CB_INSTALLER_VERSION"
	echo "usage: $PN [OPTION]"
	echo ""
	echo "Overview of the available OPTIONs:"
	echo " -h, --help           Show this help message."
	echo " -v, --version        Print version information."
	echo " --silent             Suppress the console output."
	echo " --force              Force to reinstall the common-build."
	echo " --draft              Also considers draft / pre-release versions."
	echo ""
}


#########################################################################
# Version
#########################################################################
Version() {
	echo "$CB_LINE"
	echo "toolarium common build installer $CB_INSTALLER_VERSION"
	echo "$CB_LINE"
	echo ""
}


#########################################################################
# installationSuccess
#########################################################################
installationSuccess() {
	if [ "$CB_INSTALLER_SILENT" = "false" ]; then
		echo ""
		echo "$CB_LINE"
		echo "Successfully installed toolarium-common-build $releaseVersion"
		echo "in folder $CB_HOME. "
		echo ""
		echo "The \$PATH is extended and you can start working with the command cb."
		echo "Please re-login or type in . $1, before you start."
		echo "$CB_LINE"
	fi
}


#########################################################################
# installationFailed
#########################################################################
installationFailed() {
	echo ""
	echo "$CB_LINE"
	echo "Failed installation: $1"
 	[ -r "$cbErrorTemp" ] && echo "" && cat $cbErrorTemp 2>/dev/null
	echo "$CB_LINE"
}


#########################################################################
# checkInternetConnection
#########################################################################
checkInternetConnection() {
	[ -z "$CB_ONLINE_ADDRESS" ] && CB_ONLINE_ADDRESS="8.8.8.8"
	if [ "$CB_OS" = "linux" ]; then
		CMD="ping $CB_ONLINE_ADDRESS -c 1 -w 1"
	elif [ "$CB_OS" = "cygwin" ]; then
		CMD="ping $CB_ONLINE_ADDRESS 1 1"
	elif [ "$CB_OS" = "windows" ]; then
		CMD="ping $CB_ONLINE_ADDRESS -n 1 -w 1000"
	#elif [ "$CB_OS" = "mac" ]; then
	#	CMD="ping $CB_ONLINE_ADDRESS -c 1 -w 1"
	fi

	if [ -n "$CMD" ]; then
		if ! eval "$CMD" >/dev/null 2>&1; then
			installationFailed "No internet connection detected."
		fi
	fi
}


#########################################################################
# checkHttpRequestCLI
#########################################################################
checkHttpRequestCLI() {
	which curl >/dev/null 2>&1
	[ $? -eq 0 ] && echo "curl" && return
	
	which wget >/dev/null 2>&1
	[ $? -eq 0 ] && echo "wget" && return
	echo ""
}


#########################################################################
# getLatestRelease
#########################################################################
getLatestRelease() {
    if [ "$HTTP_REQUEST_CLI" = "curl" ]; then	
		CMD="curl -fsSL $CB_RELEASE_URL"
    else
		CMD="wget -q --header=\"Accept: application/json\" -O - $CB_RELEASE_URL"
    fi

	if [ "$1" = "true" ]; then
		CMD="$CMD 2>$cbErrorTemp | grep -E -v \"(\[|\]|upload_url|assets_url|tag_name)\" \
		| grep -E -v \"^[[:space:]]*\$\" \
		| sed -e ':a' -e 'N;\$!ba' -e 's/\n/,/g' \
		| sed 's/  {,  /\n{/g;s/\"//g' \
		| grep \"prerelease: false\" \
		| head -1 2>/dev/null \
		| sed 's/,/\n/g' \
		| grep -E -v \"^[[:space:]]*\$\" \
		| grep -v \"tag_name\" \
		| grep \"name:\" \
		| awk '{print \$2}'"
	else
		CMD="$CMD 2>$cbErrorTemp | grep \"tag_name\" | awk '{print \$2}' | sed -n 's/\"\(.*\)\",/\1/p' | head -1 2>/dev/null"
	fi
	
	version=$(eval "$CMD")
	[ $? -eq 0 ] && echo ${version#v*} || echo ""
	[ -r "$cbErrorTemp" ] && [ $(stat -c %s $cbErrorTemp) -eq 0 ] && rm -f "$cbErrorTemp" >/dev/null 2>&1
}


#########################################################################
# getRelease
#########################################################################
getRelease() {
    if [ "$HTTP_REQUEST_CLI" = "curl" ]; then	
		CMD="curl -fsSL $CB_RELEASE_URL"
    else
		CMD="wget -q --header=\"Accept: application/json\" -O - $CB_RELEASE_URL"
    fi

	CMD="$CMD 2>$cbErrorTemp | grep -E -v \"(\[|\]|upload_url|assets_url|tag_name)\" \
	| grep -E -v \"^[[:space:]]*\$\" \
	| sed -e ':a' -e 'N;\$!ba' -e 's/\n/,/g' \
	| sed 's/  {,  /\n{/g;s/\"//g' \
	| grep \"name: v$1\" \
	| head -1 2>/dev/null \
	| sed 's/,/\n/g' \
	| grep -E -v \"^[[:space:]]*\$\" \
	| grep \"name:\" \
	| awk '{print \$2}'"

 	version=$(eval "$CMD")
	[ $? -eq 0 ] && echo ${version#v*} || echo ""
	[ -r "$cbErrorTemp" ] && [ $(stat -c %s $cbErrorTemp) -eq 0 ] && rm -f "$cbErrorTemp" >/dev/null 2>&1
}


#########################################################################
# getReleaseDownloadUrl
#########################################################################
getReleaseDownloadUrl() {
    if [ "$HTTP_REQUEST_CLI" = "curl" ]; then
		CMD="curl -fsSL $CB_RELEASE_URL"
    else
		CMD="wget -q --header=\"Accept: application/json\" -O - $CB_RELEASE_URL"
	fi

	CMD="$CMD 2>$cbErrorTemp | grep -E -v \"(\[|\]|upload_url|assets_url|tag_name)\" \
	| grep -E -v \"^[[:space:]]*\$\" \
	| sed -e ':a' -e 'N;\$!ba' -e 's/\n/,/g' \
	| sed 's/  {,  /\n{/g;s/\"//g' \
	| grep \"name: v$1\" \
	| head -1 2>/dev/null \
	| sed 's/,/\n/g' \
	| grep -E -v \"^[[:space:]]*\$\" \
	| grep \"tarball_url:\" \
	| awk '{print \$2}'"

	downloadUrl=$(eval "$CMD")
	[ $? -eq 0 ] && echo $downloadUrl || echo ""
	[ -r "$cbErrorTemp" ] && [ $(stat -c %s $cbErrorTemp) -eq 0 ] && rm -f "$cbErrorTemp" >/dev/null 2>&1
}


#########################################################################
# downloadRelease
#########################################################################
downloadRelease() {
    if [ "$HTTP_REQUEST_CLI" = "curl" ]; then
        curl -SsL "$1" -o "$2" 2>"$cbErrorTemp"
    else
        wget -q -O "$2" "$1" 2>"$cbErrorTemp"
    fi
}

#########################################################################
# error handler
#########################################################################
errorhandler() {
    [ -n "$DEBUG" ] && echo "${CB_LINEHEADER}ERROR on line #$LINENO, last command: $BASH_COMMAND"
    exithandler
}


#########################################################################
# exit handler
#########################################################################
exithandler() {
	rm -f "$cbErrorTemp" >/dev/null 2>&1
}


#########################################################################
# main
#########################################################################
trap 'exithandler $?; exit' 0
trap 'errorhandler $?; exit' 1 2 3 15

CB_INSTALL_PARAMETERS=

# check curl
while [ $# -gt 0 ]
do
    case "$1" in
	-h)	Usage; exit 0;;
	--help)	Usage; exit 0;;
	-v)	Version; exit 0;;
	--version)	Version; exit 0;;
	--silent) 	CB_INSTALLER_SILENT=true;;
	--force)	CB_FORCE_INSALL=true;;	
	--draft) 	CB_INSTALL_ONLY_STABLE=false;;
	*)	CB_INSTALL_PARAMETERS="$CB_INSTALL_PARAMETERS $1";;
    esac
    shift
done

if [ "$CB_INSTALLER_SILENT" = "false" ]; then
	echo "$CB_LINE"
	echo "${CB_LINEHEADER}Started toolarium-common-build installation on $(hostname), $(eval "$USER_FRIENDLY_FULLTIMESTAMP")"
	echo "${CB_LINEHEADER}Use $CB_DEVTOOLS path as devtools folder"
	echo "$CB_LINE"
	read -p "Press any key to continue..." input
	echo ""
fi

HTTP_REQUEST_CLI=$(checkHttpRequestCLI)
[ -z "$HTTP_REQUEST_CLI" ] && installationFailed "Either curl or wget is required.\nPlease install curl package (e.g. sudo apt install curl)" && exit 1
checkInternetConnection

if [ "$CB_INSTALLER_SILENT" = "false" ]; then
	[ -z "$CB_INSTALL_PARAMETERS" ] && echo "${CB_LINEHEADER}Check newest version of toolarium-common-build..."
	[ -n "$CB_INSTALL_PARAMETERS" ] && echo "${CB_LINEHEADER}Check version $CB_INSTALL_PARAMETERS of toolarium-common-build..."	
fi

CB_VERSION=
if [ -n "$CB_INSTALL_PARAMETERS" ]; then
	CB_VERSION=v$CB_INSTALL_PARAMETERS
	releaseVersion=$(getRelease $CB_INSTALL_PARAMETERS)
else
	releaseVersion=$(getLatestRelease $CB_INSTALL_ONLY_STABLE)
fi

[ -z "$releaseVersion" ] && installationFailed "Could not get remote release information." && exit 1
[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Latest version of common-build is $releaseVersion, select download link"
downloadUrl=$(getReleaseDownloadUrl $releaseVersion)

[ -z "$downloadUrl" ] && installationFailed "Could not get download url of verison $releaseVersion." && exit 1
rm -f "$cbErrorTemp" >/dev/null 2>&1
CB_VERSION_NAME="toolarium-common-build-$releaseVersion"

# create directories
! [ -d "$CB_DEVTOOLS" ] && mkdir "$CB_DEVTOOLS" >/dev/null 2>&1 && echo "${CB_LINEHEADER}Create directory $CB_DEVTOOLS"
CB_DEV_REPOSITORY="$CB_DEVTOOLS/.repository" 
! [ -d "$CB_DEV_REPOSITORY" ] && mkdir "$CB_DEV_REPOSITORY" >/dev/null 2>&1

# download toolarium-common-build
[ "$CB_FORCE_INSALL" = "true" ] && rm -f "$CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz" >/dev/null 2>&1
if [ -r "$CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz" ]; then
	[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Found already downloaded version, $CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz" 
else
	[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Install $CB_VERSION_NAME"
	downloadRelease "$downloadUrl" "$CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz"

	# in case we donwload a new version we also extract new
	! [ -r "$CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz" ] && installationFailed "Could not download version $releaseVersion."
	[ $(stat -c %s $CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz) -gt 0 ] && rm -rf "$CB_DEVTOOLS/$CB_VERSION_NAME" >/dev/null 2>&1
fi

if ! [ -r "$CB_DEVTOOLS/$CB_VERSION_NAME" ]; then 
	[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Extract $CB_VERSION_NAME.tgz in $CB_DEVTOOLS..."

	tar -zxf "$CB_DEV_REPOSITORY/$CB_VERSION_NAME.tgz" -C "$CB_DEV_REPOSITORY/" >/dev/null 2>&1 
	tarContentName=$(find $CB_DEV_REPOSITORY/* -type d -name 'toolarium-common-build-*' -print 2>/dev/null)
	mv "$tarContentName" "$CB_DEVTOOLS/$CB_VERSION_NAME" >/dev/null 2>&1
		
	# remove unecessary files
	rm "$CB_DEVTOOLS/$CB_VERSION_NAME/.gitattributes" >/dev/null 2>&1
	rm "$CB_DEVTOOLS/$CB_VERSION_NAME/.gitignore" >/dev/null 2>&1
	rm "$CB_DEVTOOLS/$CB_VERSION_NAME/README.md" >/dev/null 2>&1

	# keep backward compatibility
	if [ -d "$CB_DEVTOOLS/$CB_VERSION_NAME/src" ]; then
		mkdir "$CB_DEVTOOLS/$CB_VERSION_NAME/bin"
		cp "$CB_DEVTOOLS/$CB_VERSION_NAME/src/main/cli/*" "$CB_DEVTOOLS/$CB_VERSION_NAME/bin/" >/dev/null 2>&1
		rm -rf "$CB_DEVTOOLS/$CB_VERSION_NAME/src" >/dev/null 2>&1
	fi
	
	chmod -R +x "$CB_DEVTOOLS/$CB_VERSION_NAME/bin" >/dev/null 2>&1
fi

shellProfile="$HOME/.bashrc"
if ! [ "$CB_HOME" = "$CB_DEVTOOLS/$CB_VERSION_NAME" ]; then
	[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Set CB_HOME to $CB_DEVTOOLS/$CB_VERSION_NAME"
	CB_HOME="$CB_DEVTOOLS/$CB_VERSION_NAME"
	export CB_HOME="$CB_HOME" && export PATH="$CB_HOME/bin:$PATH"

	if [ -w "$shellProfile" ]; then
		backupFileName="${shellProfile}_cb-$(eval $FULLTIMESTAMP)"
		cp "$shellProfile" "$backupFileName" >/dev/null 2>&1 && chmod +r "$backupFileName" >/dev/null 2>&1
	
		if [ -z "$(cat $shellProfile | grep 'toolarium-common-build support')" ]; then
			[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Modify file $shellProfile" 
			echo "" >> "$shellProfile"
			echo "# toolarium-common-build support" >> "$shellProfile"
			echo "export CB_HOME=$CB_HOME && export PATH=\"\$CB_HOME/bin:\$PATH\"" >> "$shellProfile"
		else
			newFileName="${shellProfile}_cb-new"
			rm -f "$newFileName" >/dev/null 2>&1

			#TEST: CB_HOME="$CB_HOME/aa"
			CB_HOME_ESCAPED=$(echo "$CB_HOME" | sed 's/\//\\\//g')
			[ "$CB_INSTALLER_SILENT" = "false" ] && echo "${CB_LINEHEADER}Update file $shellProfile" 
			cat "$shellProfile" | sed "s/CB_HOME\=.*\&/CB_HOME\=$CB_HOME_ESCAPED\ \&\&/g" > "$newFileName"
			chmod --reference="$shellProfile $newFileName" >/dev/null 2>&1
			chmod +r+w "$newFileName" >/dev/null 2>&1
			mv -f "$newFileName" "$shellProfile" >/dev/null 2>&1
		fi
	else
		echo "${CB_LINEHEADER}Can not set CB_HOME in $shellProfile, it's write protected."
	fi
fi

installationSuccess "$shellProfile"


#########################################################################
# EOF
#########################################################################
